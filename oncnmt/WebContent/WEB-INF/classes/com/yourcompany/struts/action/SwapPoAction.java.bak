/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.yourcompany.struts.action;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.RedirectingActionForward;
import org.apache.struts.actions.DispatchAction;

import com.yourcompany.struts.UtilBean.Swap;
import com.yourcompany.struts.UtilBean.Swap2;
import com.yourcompany.struts.UtilClass.Connexion;
import com.yourcompany.struts.form.SwapForm;


public class SwapPoAction extends DispatchAction {
	
	public ActionForward afficher(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		SwapForm swapForm = (SwapForm) form;
		
		ArrayList list = new ArrayList();
		List list2,list3;
	
		
	
		list2 = swapForm.getSwap();
		list3 = swapForm.getSwap2();
	
		swapForm.setSwap(list2); 
	
		
		
		
		String article = request.getParameter("article");
		System.out.println(article);
		
			
		String s_str = request.getParameter("s_str");
		Long s_str1 =Long.parseLong(s_str);
		System.out.println(s_str);
		
		String s_end = request.getParameter("s_end");
		Long s_end1 =Long.parseLong(s_end);
		System.out.println(s_end);
		
		String qute = request.getParameter("qute");
		System.out.println(qute);
		
		// dans les combos
		
		swapForm.setArticle(article);		
		swapForm.setND(s_str1);
		swapForm.setNF(s_end1);
		 
		swapForm.setHiddenTest("");
		
		
	
	
		
		return mapping.findForward("confirmWO2"); 
	
	}
	
	public String getResult(String Str)
	{
		return ((Str != null) ? Str=Str.trim():Str);	
	}
	
	
	public String setResult(String Str)
	{
		return ((Str != null) ? Str : null);	
	}
	
	public ActionForward Ajouter(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws SQLException {
		
		SwapForm swapForm = (SwapForm) form;
		
		String art,prof,nd,nf,qute,trouv=null;
		Long ndl,nfl,qte;
		List list=null;
		List listGrand=null;
		Statement st = null;
		ResultSet rs = null;
		Boolean trouver= false;
		Boolean boucle= false, existe= false, existe2=false;
		
		 Connexion connexion=new Connexion();
	     Connection con=connexion.createConnection();
		
		ArrayList nouv=new ArrayList();
		
		Swap2 swp = new Swap2();
		
		
		
		list = swapForm.getSwap2();
		listGrand= swapForm.getSwap();
		
		art = swapForm.getArticle();
		
		Long serial_start = swapForm.getND();
		 Long serial_end = swapForm.getNF();
		 
		 nd = Long.toString(serial_start);
		 System.out.println(nd);
		 nf = Long.toString(serial_end);
		
		 ndl=Long.parseLong(nd);
		nfl=Long.parseLong(nf);
		qte=nfl-ndl+1;
		qute=Long.toString(qte);
		
		if (qte<=0){
			swapForm.setHiddenTest("fin inferieur debut");	
	    	 System.out.println("le fin est< debut");
	    	 
	    	 swapForm.setArticle("");
	    	// chargementForm.setProfil("");
	    	 swapForm.setND(null);
	    	 swapForm.setNF(null);
	    	
	    	  return mapping.findForward("confirmWO2");
	     }
		
	
		
		
		  ///////////// vérifier la taille du serial number
		
		if(nd.length()<12 )
		 {
			swapForm.setHiddenTest("serial début insuffisant");	
		   	    System.out.println("serial début insuffisant");
		   	    boucle = true;
		   	    return mapping.findForward("confirmWO2");
		 }
		 else {
			 if(nf.length()<12){
				 
				 swapForm.setHiddenTest("serial fin insuffisant");	
			   	    System.out.println("serial fin insuffisant");
			   	    boucle = true;
			   	    return mapping.findForward("confirmWO2");
				 
			 }
		 }
		 if(boucle.equals(false))
				
			{
			 if (list.size()==0){
					
		   		 for (int j=0;j<listGrand.size();j++){
		   			Swap list3 = (Swap)listGrand.get(j);
		   		 if(
		 	    	     (ndl >= Long.parseLong(list3.getStart()) 
		 	    	    		 &&  
		 	    	      nfl<= Long.parseLong(list3.getEnd())
		 	    	             )
		 	    	    )
		 	    		{
		 	    		
		 	    		 trouver=true;
		 	    		 existe=true;
		 	    		 
		 	    		 break;
		 	    		
		 	    		 	
		 	    		}/// end if teste coll grande
		   		 }//// end for coll grande
		   		
		   		 if (existe.equals(false)){
		   			swapForm.setHiddenTest("range n'est pas dans la coll grande");	
			    	 System.out.println("range n'existe pas dans la collection grande");
			    	 
			    	
			    	
			    	  return mapping.findForward("confirmWO2");
			     }
		   else{
			
             //////	  calculer la quantité
				  		
				  		 qte=nfl-ndl+1;
				  		 qute=Long.toString(qte);
				  		 System.out.println(qute);
				  		 
				  		 ///// remplir la collection
				  		 
				  		swp.setAa(art);
				  		swp.setSt(nd);
				  		swp.setStt(nd);
				  		swp.setSe(nf);
				  		swp.setSee(nf);
				  		swp.setQt(qute);
				  		swp.setAaa(art);
				  		swp.setQtt(qute);
				  		
				  		list.add(swp);
				  		 
				  		
				  			 for (int j=0; j<list.size();j++){
				  				System.out.println("dans le for");
				  				System.out.println("j ="+j);
				  				
				  				Swap2 list3 = (Swap2)list.get(j);
				  					
				  				  if ((list3.getAa().equals("")))  
				  					{
				  						System.out.println("dans le if");
				  					}
				  			      else{
				  						nouv.add(list3);
				  						System.out.println("dans le else");
				  					
				  					}
				  					
				  			}
				  		
				  		trouver=true;
				  		swapForm.setSwap2(nouv);
		  		    	
		  		      
		    }// end if ""
		   		 
			 }
			 else{
		   		 
				 
			 
				for (int i=0; i<list.size();i++){
				
				 Swap2 list2 = (Swap2)list.get(i);
					
					if (list2.getAa().equals("")){
		  		    	
		  		    	System.out.println("la 1ere ligne vide");
		  		    	
		  		    	for (int j=0;j<listGrand.size();j++){
		  		    		Swap list3 =(Swap) listGrand.get(j);
		  		    		
		  		    		
		  		    	 if(
		  		    			(ndl >= Long.parseLong(list3.getStart()) 
		  			    	    		 &&  
		  			    	      nfl<= Long.parseLong(list3.getEnd())
		  			    	             ) 
		  		    	     )
		  		    		{
		  		    		 
		  		    		 
		  		    		
		  		    		 trouver=true;
		  		    		 existe=true;
		  		    		 
		  		    		 break;
		  		    		
		  		    		 	
		  		    		}/// end if teste coll grande
		  		    	 
		  		    	  		    	
		  		    		    
		  		    	  }//// end for coll grande
		  		    
		  		   	if (existe.equals(false)){
		  		    		 swapForm.setHiddenTest("range n'est pas dans la coll grande");	
			  		    	 System.out.println("range n'existe pas dans la collection grande");
			  		    	
			  		    	
			  		    	  return mapping.findForward("confirmWO2");
			  		     }	
		  		   	else{
		  		    	
	                     //////	  calculer la quantité
				  		
				  		 qte=nfl-ndl+1;
				  		 qute=Long.toString(qte);
				  		 System.out.println(qute);
				  		 
				  		 ///// remplir la collection
				  		 
				  		swp.setAa(art);
				  		swp.setSt(nd);
				  		swp.setStt(nd);
				  		swp.setSe(nf);
				  		swp.setSee(nf);
				  		swp.setQt(qute);
				  		swp.setAaa(art);
				  		swp.setQtt(qute);
				  		
				  		list.add(swp);
				  		 
				  		
				  			 for (int j=0; j<list.size();j++){
				  				System.out.println("dans le for");
				  				System.out.println("j ="+j);
				  				
				  				Swap2 list3 = (Swap2)list.get(j);
				  					
				  				  if ((list3.getAa().equals("")))  
				  					{
				  						System.out.println("dans le if");
				  					}
				  			      else{
				  						nouv.add(list3);
				  						System.out.println("dans le else");
				  					
				  					}
				  					
				  			}
				  		
				  		trouver=true;
				  		swapForm.setSwap2(nouv);
		  		    	break;
		  		   
		  		    }// end if ""
					}
					
			     ///// si la collection est non vide
		  		    
		  		 else{
		  		    	
		  		    	System.out.println("la 1ere ligne non vide");
		  		         
		  		    	if(
		  		    			(Long.parseLong(nd)>= Long.parseLong(list2.getSt()) )&& (Long.parseLong(nf)<= (Long.parseLong(list2.getSe()) ))
		  		    			||
		  		    			(Long.parseLong(list2.getSt())>=Long.parseLong(nd) && Long.parseLong(list2.getSt())<=Long.parseLong(nf))
		  		    			||
		  		    			(Long.parseLong(list2.getSe())>=Long.parseLong(nd) && Long.parseLong(list2.getSe())<=Long.parseLong(nf))
		  		    	
		  		    	   )
		  		    	{
		  		    		 swapForm.setHiddenTest("range dans la coll");	
			  		    	 System.out.println("range existe dans la collection");
			  		    	 swapForm.setArticle("");
			  				  swapForm.setND(null);
			  				  swapForm.setNF(null);
			  		    	 trouver=true;
			  		    	 existe2= true;
			  		    	 existe=true;
			  		    	 
			  		    	return mapping.findForward("confirmWO2");
		  		    	}//// end if collection
		  		    
		  		    }/// end else " "
					
					if(existe2.equals(false))
		    		{
		  		   
       ////	n'existe pas dans la petite coll
						for (int j=0;j<listGrand.size();j++){
							Swap list3 =(Swap) listGrand.get(j);
		  		    		
		  		    		
		  		    		
		  		    		if(
			  		    			(ndl >= Long.parseLong(list3.getStart()) 
			  			    	    		 &&  
			  			    	      nfl<= Long.parseLong(list3.getEnd())
			  			    	            ) 
			  		    	     )
		  		    		
			  		    		{
			  		    		// trouver=true;
			  		    		 existe=true;
			  		    		 
			  		    		 break;
			  		    		
			  		    		 	
			  		    		}/// end if teste coll grande
		  		    	 	
		  		    	  }//// end for coll grande
			   
			      }// end if existe2
			    
			    }/// end else " "

	}
	}
		 if (existe.equals(false)){
			 swapForm.setHiddenTest("range n'est pas dans la coll grande");	
	      	 System.out.println("range n'existe pas dans la collection grande");
	      	 
	      	swapForm.setArticle("");
	       	swapForm.setND(null);
	      	swapForm.setNF(null);
	      	
	      	  return mapping.findForward("confirmWO2");
	       }		
	
			 
			 
			  if (trouver.equals(false)){
	  			   
		  			 System.out.println("rang n'existe pas dans la collection ");
		  			 
		  		 //////	  calculer la quantité
				  		
				  		 qte=nfl-ndl+1;
				  		 qute=Long.toString(qte);
				  		 System.out.println(qute);
				  		 
				  		 ///// remplir la collection
				  		 
				  		swp.setAa(art);
				  		swp.setSt(nd);
				  		swp.setStt(nd);
				  		swp.setSe(nf);
				  		swp.setSee(nf);
				  		swp.setQt(qute);
				  		swp.setAaa(art);
				  		swp.setQtt(qute);
				  		
				  		list.add(swp);
				  		 
				  		
			  		swapForm.setSwap2(list); 
			  }
			  		 
			  		 
			  		
		
		
		
     /////// vider les combo + champs de texte
			  swapForm.setArticle("");
			  swapForm.setND(null);
			  swapForm.setNF(null);
			  swapForm.setNote(swapForm.getNote());
			  swapForm.setHiddenTest("");
		 
		
		
		return mapping.findForward("confirmWO2"); 
	
			
		
	}
	
	//////////////// croi rouge
	
	public ActionForward Retirer(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws SQLException {
		
		SwapForm swapForm = (SwapForm) form;
		
		List list=null;
		ArrayList nouv= new ArrayList();
		
		list = swapForm.getSwap2();
		
		String art = request.getParameter("aaa");
		System.out.println("arti"+art);
		String ser_str = request.getParameter("stt");
		System.out.println("serial_str"+ser_str);
		String ser_end = request.getParameter("see");
		System.out.println("serial_end"+ser_end);
		String quante = request.getParameter("qtt");
		System.out.println("qte"+quante);
		
		
		
		for (int i=0; i<list.size();i++){
		
			Swap2 list2 = (Swap2)list.get(i);
		
			
	
		
		if ((list2.getAa().equals(art))&&(list2.getSe().equals(ser_end))&&(list2.getSt().equals(ser_str))) 
		{
			System.out.println("dans le if");
		}
		
		else{
			nouv.add(list2);
			
		}
		
		}
		
		swapForm.setSwap2(nouv); 
		swapForm.setHiddenTest("");
		
		return mapping.findForward("confirmWO2"); 
		}
	
	///////////// valider
	
	public ActionForward valider(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws SQLException {
		
		SwapForm swapForm = (SwapForm) form;
		
		Connexion connexion=new Connexion();
		Connection con=connexion.createConnection();
		
		Statement st,st1,st2,st3,st4,st5,st8,st9,st10,st11 = null;
		ResultSet rs = null,rs1,rs2 = null,rs3,rs4,rs8 = null;
		con.setAutoCommit(false);
		
		st = con.createStatement();
		st1=con.createStatement();
		st2=con.createStatement();
		st3=con.createStatement();
		st4=con.createStatement();
		st5=con.createStatement();
		st8=con.createStatement();
		st9=con.createStatement();
		st10=con.createStatement();
		st11 = con.createStatement();
		
		String act_id = null,dest_id=null;
		List prepaid;
		String start,end,tra,wh,no,whp,pfp,arp,rp,acp,pq,statu,swap,promo,
		prior,p,t,s,r,ss,ee,maxrng = null,a,b,c,d = null,max_range,max_range2,max_range3=null,rng_end,rng_start;
		int h,h1,h3,R2,R3,R1,h4,h5,R4=0;
		Long l1,l2,l3,l4;
		
		String user = (String)request.getSession().getAttribute("username");
		System.out.println("user connecté :"+user);
		String whs = (String)request.getSession().getAttribute("werhs");
		String max = (String)request.getSession().getAttribute("max");
		System.out.println("warehouse :"+whs);
		System.out.println("le max apres request :"+max);
		String note = swapForm.getNote();
		System.out.println("note "+note);
		
		
		prepaid = swapForm.getSwap2();
		
		
		
		
		
		
	////// calculer id_user
		
		 rs = st.executeQuery("select act_id from gss_actor where act_name = '"+user+"'");
		
		 		  
		 if(rs.next())
			{
				act_id =rs.getString(1).trim();
				System.out.println(act_id);
			}
			
			
			
	    /////////////////////// INSERTION DE LA TRANSACTION WPO
			
			System.out.println ("insert into  gss_transaction values('"+max+"','WPO','W00',SYSDATE,'"+act_id+"','','',decode('"+note+"','null',null,'"+note+"'),'','','','','N')");
			h = st3.executeUpdate("insert into  gss_transaction values('"+max+"','WPO','W00',SYSDATE,'"+act_id+"','','',decode('"+note+"','null',null,'"+note+"'),'','','','','N')");
			 
		         	
			
		/////////////////////// insérer les ranges de la 2eme collections dans la base
		
		 ////tester si la collection est vide
		if (prepaid.size()==0){
			
			 swapForm.setHiddenTest("collection null");
	 		  swapForm.setND(null);
	 		  swapForm.setNF(null);
	 		  
	 		  return mapping.findForward("confirmWO2");
			
		}
		
		 for (int j=0;j<prepaid.size();j++){
		    	
			 Swap2 pre = ( Swap2)prepaid.get(j);
		 	   
		 	   System.out.println(j);
		 	   String art=pre.getAa();
		 	   
		 	   if (art.equals("")){
		 		  
		 		  swapForm.setHiddenTest("collection null");
		 		  swapForm.setND(null);
		 		  swapForm.setNF(null);
		 		  
		 		  return mapping.findForward("confirmWO2");
		 	   
		 	   } //// end if collection null
		 	   
		 	   else {
		 		   
		 		   
               ////// le max du range
		 			try{
		 				rs4=st5.executeQuery("select max(rng_id) from gss_range where ACT_ID='"+act_id+"'");
		 				
		 				if (rs4.next()){
		 				     
		 					maxrng=rs4.getString(1).trim();
		 				    
		 				    }
		 				
		 				    R2=Integer.parseInt(maxrng);
		 				 
		 				    R2=R2+1;
		 					max_range=Integer.toString(R2);
		 					System.out.println("max range à inséré :"+max_range); }
		 				
		 				catch(Exception ex){
		 					max_range = "1000000000";
		 				}
		 		   
		
	      /////// la j eme ligne
			    System.out.println("aa="+pre.getAa());
	            System.out.println("st="+pre.getSt());
				System.out.println("se="+pre.getSe());
				System.out.println("qt="+pre.getQt());
			
				ss = pre.getSt();
				System.out.println("ss: "+ss);
				ee = pre.getSe();
				System.out.println("ee: "+ee);
				
			///////  sélectionner les ranges qui existent dans la base avec l'etat brute	
			
				rs1=st1.executeQuery("select rng_start,rng_end,rng_id,act_id,profil_id,r.art_id,rng_pq,rng_statut,rng_swap,trans_type,whs_id,trans_no,rng_promotion,rng_priorite,rng_packaged,rng_transfert,rng_sortie,rng_reintegration,rng_whs,rng_dist, rng_packaging_whs,rng_sortie_whs,rng_reintegration_whs,rng_transfert_whs from gss_range r, gss_article ar where (r.art_id = ar.art_id)and (rng_inactif ='A')and (ar.art_type_id='S1')and (r.rng_swap='EN COURS') and (r.rng_tpd is null)");			
				
				while (rs1.next()){
					
					
					
					start = rs1.getString(1).trim();
					System.out.println("1"+start);
								
					end = rs1.getString(2).trim();
					System.out.println("2"+end);
					/*tra = rs1.getString(10).trim();
					System.out.println("3"+tra);
					wh=rs1.getString(11).trim();
					System.out.println("4"+wh);
					no=rs1.getString(12).trim();
					System.out.println("5"+no);*/
					whp=rs1.getString(19).trim();
					System.out.println("6"+whp);
					pfp=getResult(rs1.getString(5));
					System.out.println("7"+pfp);
					arp=rs1.getString(6).trim();
					System.out.println("8"+arp);
					rp=rs1.getString(3).trim();
					System.out.println("9"+rp);
					acp=rs1.getString(4).trim();
					System.out.println("10"+acp);
					pq=getResult(rs1.getString(7));
					System.out.println("11"+rp);
					statu=rs1.getString(8).trim();
					System.out.println("12"+statu);
					swap=getResult(rs1.getString(9));
					System.out.println("13"+rp);
					promo=getResult(rs1.getString(13));
					System.out.println("14"+promo);
				    prior=getResult(rs1.getString(14));
					System.out.println("15"+prior);
				    p=rs1.getString(15).trim();
					System.out.println("16"+rp);
					t=rs1.getString(16).trim();
					System.out.println("17"+rp);
					s=rs1.getString(17).trim();
					System.out.println("18"+rp);
					r=rs1.getString(18).trim();
					System.out.println("19"+rp);
					
					
					String dist=getResult(rs1.getString(20));
					System.out.println("20"+dist);
					
					


					 String whspack=getResult(rs1.getString(21));
					           System.out.println("21"+whspack);
					          
					           String whssor=getResult(rs1.getString(22));
					           System.out.println("22"+whssor);
					           
					           String whsrentegr=getResult(rs1.getString(23));
					           System.out.println("23"+whsrentegr);
					           
					           String whstransfert=getResult(rs1.getString(24));
					                  System.out.println("24"+whstransfert);
					
			
				//// insertion des ranges dans la base	
					
					/////////	 le range fils = range pere
					  
					  if ( (ss.equals(start)) && (ee.equals(end)) ) 
					  {
						  System.out.println("dans le 1er if");
						  
						 				  
						  System.out.println("insert into gss_range values ('"+max_range+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+start+"','"+end+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'BRUTE','SWAP','WPO','W00','"+max+"','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"')");	
						 h1 = st4.executeUpdate("insert into gss_range values ('"+max_range+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+start+"','"+end+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'BRUTE','SWAP','WPO','W00','"+max+"','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"',decode('"+dist+"','null',null,'"+dist+"'),decode('"+whspack+"','null',null,'"+whspack+"'),decode('"+whssor+"','null',null,'"+whssor+"'),decode('"+whsrentegr+"','null',null,'"+whsrentegr+"'),decode('"+whstransfert+"','null',null,'"+whstransfert+"')");
						
												
							System.out.println("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range+" ,'"+act_id+"'code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'");
							
							h3 = st9.executeUpdate("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range+" ,'"+act_id+"' code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'"); 
						
							h3=0;
							st9=null;
							st9=con.createStatement();
							System.out.println("insert into gss_transaction_range values ('WPO','"+whs+"','"+max+"','"+max_range+"','"+act_id+"',SYSDATE)");
							h3 = st9.executeUpdate("insert into gss_transaction_range values ('WPO','"+whs+"','"+max+"','"+max_range+"','"+act_id+"',SYSDATE)");
							
							System.out.println("UPDATE gss_range SET rng_inactif = 'I',rng_inactif_date=sysdate WHERE (rng_id='"+rp+"')and (act_id='"+acp+"')");
							h4=st10.executeUpdate("UPDATE gss_range SET rng_inactif = 'I',rng_inactif_date=sysdate WHERE (rng_id='"+rp+"')and (act_id='"+acp+"')");
						break;
					 
					  }///// end if 1
					    
					  ////// le range fils est la partie gauche du range pere
					  
					  if((ss.equals(start))&&(Long.parseLong(ee)< Long.parseLong(end)) ){
						  System.out.println("dans le 2eme if");
						  
						  l1 = Long.parseLong(ee);
						  l2=l1+1;
						  rng_end = Long.toString(l2);
						  
						  
						     System.out.println("la 1ere insertion dans la table range : insert into gss_range values ('"+max_range+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+ss+"','"+ee+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'BRUTE','SWAP','WPO','W00','"+max+"','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"')");	
							 h1 = st4.executeUpdate("insert into gss_range values ('"+max_range+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+ss+"','"+ee+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'BRUTE','SWAP','WPO','W00','"+max+"','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"',decode('"+dist+"','null',null,'"+dist+"'),decode('"+whspack+"','null',null,'"+whspack+"'),decode('"+whssor+"','null',null,'"+whssor+"'),decode('"+whsrentegr+"','null',null,'"+whsrentegr+"'),decode('"+whstransfert+"','null',null,'"+whstransfert+"')");
							 				  
						    R3= Integer.parseInt(max_range);
						    R3 = R3 +1;
							max_range2=Integer.toString(R3);
							 
							
							System.out.println("max range 2 string "+max_range2);  
							
						     System.out.println("la 2eme insertion dans la table range : insert into gss_range values ('"+max_range2+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+rng_end+"','"+end+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'"+statu+"',decode('"+swap+"','null',null,'"+swap+"'),'','','','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"')");	
							 h5 = st11.executeUpdate("insert into gss_range values ('"+max_range2+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+rng_end+"','"+end+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'"+statu+"',decode('"+swap+"','null',null,'"+swap+"'),'','','','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"',decode('"+dist+"','null',null,'"+dist+"'),decode('"+whspack+"','null',null,'"+whspack+"'),decode('"+whssor+"','null',null,'"+whssor+"'),decode('"+whsrentegr+"','null',null,'"+whsrentegr+"'),decode('"+whstransfert+"','null',null,'"+whstransfert+"')");
							 
							 
								
						     System.out.println("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range+" ,'"+act_id+"'code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'");
						     h3 = st9.executeUpdate("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range+" ,'"+act_id+"' code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'"); 
							
						     
							System.out.println("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range2+" ,'"+act_id+"'code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'");
							h4 = st10.executeUpdate("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range2+" ,'"+act_id+"' code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'");
							
							h3=0;
							st9=null;
							st9=con.createStatement();
							System.out.println("insert into gss_transaction_range values ('WPO','"+whs+"','"+max+"','"+max_range+"','"+act_id+"',SYSDATE)");			
							h3 = st9.executeUpdate("insert into gss_transaction_range values ('WPO','"+whs+"','"+max+"','"+max_range+"','"+act_id+"',SYSDATE)");
							
							System.out.println("UPDATE gss_range SET rng_inactif = 'I',rng_inactif_date=sysdate WHERE (rng_id='"+rp+"')and (act_id='"+acp+"')");
							h4=st10.executeUpdate("UPDATE gss_range SET rng_inactif = 'I',rng_inactif_date=sysdate WHERE (rng_id='"+rp+"')and (act_id='"+acp+"')");
						break;
					 
					  }//////end if 2
					  
				    
					  ///// le range fils est la partie droite du range pere
					  
					  if((Long.parseLong(ss)> Long.parseLong(start))&&(ee.equals(end)) )
				  
				      {
						  System.out.println("dans le 3eme if");
						  l1 = Long.parseLong(ss);
						  l2=l1-1;
						  rng_start = Long.toString(l2);
						  
						  System.out.println("la 1ere insertion dans la table range : insert into gss_range values ('"+max_range+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+ss+"','"+ee+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'BRUTE','SWAP','WPO','W00','"+max+"','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"')");	
							 h1 = st4.executeUpdate("insert into gss_range values ('"+max_range+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+ss+"','"+ee+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'BRUTE','SWAP','WPO','W00','"+max+"','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"',decode('"+dist+"','null',null,'"+dist+"'),decode('"+whspack+"','null',null,'"+whspack+"'),decode('"+whssor+"','null',null,'"+whssor+"'),decode('"+whsrentegr+"','null',null,'"+whsrentegr+"'),decode('"+whstransfert+"','null',null,'"+whstransfert+"')");
							 				  
						    R3= Integer.parseInt(max_range);
						    R3 = R3 +1;
							max_range2=Integer.toString(R3);
							 
							
							System.out.println("max range 2 string "+max_range2);  
							
						     System.out.println("la 2eme insertion dans la table range : insert into gss_range values ('"+max_range2+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+start+"','"+rng_start+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'"+statu+"',decode('"+swap+"','null',null,'"+swap+"'),'','','','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"')");	
							 h5 = st11.executeUpdate("insert into gss_range values ('"+max_range2+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+start+"','"+rng_start+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'"+statu+"',decode('"+swap+"','null',null,'"+swap+"'),'','','','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"',decode('"+dist+"','null',null,'"+dist+"'),decode('"+whspack+"','null',null,'"+whspack+"'),decode('"+whssor+"','null',null,'"+whssor+"'),decode('"+whsrentegr+"','null',null,'"+whsrentegr+"'),decode('"+whstransfert+"','null',null,'"+whstransfert+"')");
							 
							 
								
						     System.out.println("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range+" ,'"+act_id+"'code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'");
						     h3 = st9.executeUpdate("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range+" ,'"+act_id+"' code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'"); 
							
						     
							System.out.println("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range2+" ,'"+act_id+"'code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'");
							h4 = st10.executeUpdate("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range2+" ,'"+act_id+"' code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'");
							
							h3=0;
							st9=null;
							st9=con.createStatement();
							System.out.println("insert into gss_transaction_range values ('WPO','"+whs+"','"+max+"','"+max_range+"','"+act_id+"',SYSDATE)");			
							h3 = st9.executeUpdate("insert into gss_transaction_range values ('WPO','"+whs+"','"+max+"','"+max_range+"','"+act_id+"',SYSDATE)");
							
							System.out.println("UPDATE gss_range SET rng_inactif = 'I',rng_inactif_date=sysdate WHERE (rng_id='"+rp+"')and (act_id='"+acp+"')");
							h4=st10.executeUpdate("UPDATE gss_range SET rng_inactif = 'I',rng_inactif_date=sysdate WHERE (rng_id='"+rp+"')and (act_id='"+acp+"')");
						break;
					  
				      }/////// end if 3
		 	   
					 //////// le fils est au milieu du pere
					  
					  if((Long.parseLong(ss)> Long.parseLong(start))&&(Long.parseLong(ee)< Long.parseLong(end)))
					  {
						  System.out.println("dans le 4eme if");
						  
						  l1 = Long.parseLong(ee);
						  l2=l1+1;
						  rng_start = Long.toString(l2);
						  
						  l3= Long.parseLong(ss);
						  l4=l3-1;
						  rng_end = Long.toString(l4);
						  
						  System.out.println("la 1ere insertion dans la table range : insert into gss_range values ('"+max_range+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+start+"','"+rng_end+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'"+statu+"',decode('"+swap+"','null',null,'"+swap+"'),'','','','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"')");	
						  h1 = st4.executeUpdate("insert into gss_range values ('"+max_range+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+start+"','"+rng_end+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'"+statu+"',decode('"+swap+"','null',null,'"+swap+"'),'','','','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"',decode('"+dist+"','null',null,'"+dist+"'),decode('"+whspack+"','null',null,'"+whspack+"'),decode('"+whssor+"','null',null,'"+whssor+"'),decode('"+whsrentegr+"','null',null,'"+whsrentegr+"'),decode('"+whstransfert+"','null',null,'"+whstransfert+"')");
						  
						  R3= Integer.parseInt(max_range);
						  R3 = R3 +1;
						  max_range2=Integer.toString(R3);
						  System.out.println("max range 2 string "+max_range2); 
							 
						  System.out.println("la 2eme insertion dans la table range : insert into gss_range values ('"+max_range2+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+rng_start+"','"+end+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'"+statu+"',decode('"+swap+"','null',null,'"+swap+"'),'','','','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"')");	
						  h1 = st4.executeUpdate("insert into gss_range values ('"+max_range2+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+rng_start+"','"+end+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'"+statu+"',decode('"+swap+"','null',null,'"+swap+"'),'','','','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"',decode('"+dist+"','null',null,'"+dist+"'),decode('"+whspack+"','null',null,'"+whspack+"'),decode('"+whssor+"','null',null,'"+whssor+"'),decode('"+whsrentegr+"','null',null,'"+whsrentegr+"'),decode('"+whstransfert+"','null',null,'"+whstransfert+"')");
						  
						  R4= Integer.parseInt(max_range2);
						  R4 = R4 +1;
						  max_range3=Integer.toString(R4);
						  System.out.println("max range 3 string "+max_range3); 
						  
						  System.out.println("la 3eme insertion dans la table range : insert into gss_range values ('"+max_range3+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+ss+"','"+ee+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'BRUTE','SWAP','WPO','W00','"+max+"','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"',decode('"+dist+"','null',null,'"+dist+"'))");	
						  h1 = st4.executeUpdate("insert into gss_range values ('"+max_range3+"','"+act_id+"',decode('"+pfp+"','null',null,'"+pfp+"'),'"+arp+"','"+ss+"','"+ee+"','"+rp+"','"+acp+"','A',SYSDATE,'',decode('"+pq+"','null',null,'"+pq+"'),'BRUTE','SWAP','WPO','W00','"+max+"','','',decode('"+promo+"','null',null,'"+promo+"'),decode('"+prior+"','null',null,'"+prior+"'),'"+p+"','"+t+"','"+s+"','"+r+"','"+whp+"',decode('"+dist+"','null',null,'"+dist+"'),decode('"+whspack+"','null',null,'"+whspack+"'),decode('"+whssor+"','null',null,'"+whssor+"'),decode('"+whsrentegr+"','null',null,'"+whsrentegr+"'),decode('"+whstransfert+"','null',null,'"+whstransfert+"')");
							 	
						  System.out.println("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range+" ,'"+act_id+"'code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'");
						  System.out.println("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range2+" ,'"+act_id+"'code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'");
						  System.out.println("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range3+" ,'"+act_id+"'code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'");
								
							
						  
						  h3 = st9.executeUpdate("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range+" ,'"+act_id+"' code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'"); 
						  h4 = st10.executeUpdate("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range2+" ,'"+act_id+"' code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'");
						  h5 = st8.executeUpdate("insert into gss_transaction_range  select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"+max_range3+" ,'"+act_id+"'code ,t_r_date from gss_transaction_range where t_r_rng_id='"+rp+"' and t_r_rng_act_id ='"+acp+"'");
							
						    
						    h3=0;
							st9=null;
							st9=con.createStatement();
							System.out.println("insert into gss_transaction_range values ('WPO','W00','"+max+"','"+max_range3+"','"+act_id+"',SYSDATE)");			
							
							h3 = st9.executeUpdate("insert into gss_transaction_range values ('WPO','W00','"+max+"','"+max_range3+"','"+act_id+"',SYSDATE)");
							
							System.out.println("UPDATE gss_range SET rng_inactif = 'I',rng_inactif_date=sysdate WHERE (rng_id='"+rp+"')and (act_id='"+acp+"')");
							h4=st10.executeUpdate("UPDATE gss_range SET rng_inactif = 'I',rng_inactif_date=sysdate WHERE (rng_id='"+rp+"')and (act_id='"+acp+"')");
						
							break;
					  }// end if 4
		 	   
				 } // while
										 	  
		 	   } //end else collection null
		
		
		 }  //end for


    	con.commit();
		
		System.out.println("terminer avec sucees");
		swapForm.setNote("");
	


		  ActionForward  forward = new RedirectingActionForward();
	      forward.setPath("/confirmSwpo.do");
	      return forward;
		
		
	} ////// methode
	
	
	public ActionForward annuler(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws SQLException {
	
		SwapForm swapForm = (SwapForm) form;
		
		 ActionForward  forward = new RedirectingActionForward();
	      forward.setPath("/confirmSwpo.do");
	      return forward;
		
		
	}

	
	


}