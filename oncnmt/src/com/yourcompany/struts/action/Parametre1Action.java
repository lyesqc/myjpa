/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.yourcompany.struts.action;

import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.naming.NamingException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.write.WritableSheet;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.yourcompany.struts.UtilBean.Ordre;
import com.yourcompany.struts.UtilBean.Profil;
import com.yourcompany.struts.UtilBean.Rang3;
import com.yourcompany.struts.UtilClass.Connexion; // import
// com.yourcompany.struts.UtilClass.Utilclass;
import com.yourcompany.struts.form.Parametre1Form;
import com.yourcompany.struts.form.ParametreForm;

/**
 * MyEclipse Struts Creation date: 11-14-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/parametre1" name="parametre1Form" parameter="hidden"
 *                scope="request" validate="true"
 */
public class Parametre1Action extends DispatchAction {

	public ActionForward afficherwarehouse(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException,
			ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds parametre");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1 = null;
		ResultSet rs, rs1 = null;
		ArrayList list = new ArrayList();
		st = con.createStatement();

		rs = st.executeQuery("select w.whs_id,w.whs_adresse,decode(w.whs_status,'A','Actif','I','Inactif','_') from gss_warehouse w ");

		while (rs.next())

		{
			Ordre ordre = new Ordre();
			String acteur = rs.getString(2).trim();
			System.out.println(acteur);

			String activer = rs.getString(3).trim();
			System.out.println(activer);

			String code = rs.getString(1).trim();
			System.out.println(code);

			ordre.setUser(acteur);
			ordre.setAprob(activer);
			ordre.setCode(code);
			list.add(ordre);

		}

		parametre1Form.setListacteur(list);

		parametre1Form.setCode("");
		parametre1Form.setLibelle("");
		parametre1Form.setType("");
		parametre1Form.setRegion("");
		parametre1Form.setWritparam("Paramétrage warehouse");
		parametre1Form.setHiddenTest("");

		con.close();

		return mapping.findForward("parametrwarehouse");

	}

	public ActionForward activerwarehouse(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException,
			ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds activer");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1 = null;
		ResultSet rs, rs1 = null;
		String update_active = null, nbr = null;
		List list = new ArrayList();
		st = con.createStatement();
		st1 = con.createStatement();
		con.setAutoCommit(false);

		/*
		 * String par=(String)request.getAttribute("parametre");
		 * System.out.println(par);
		 */

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		String activation = parametre1Form.getActiver();
		System.out.println(activation);

		String code = parametre1Form.getCode();
		System.out.println(code);

		String libelle = parametre1Form.getLibelle();
		System.out.println(libelle);

		if (activation.equals("Actif")) {
			update_active = "I";
		}
		if (activation.equals("Inactif")) {
			update_active = "A";
		}

		rs1 = st1
				.executeQuery("select  count(*) from gss_warehouse t  where t.whs_adresse='"
						+ libelle + "'");
		while (rs1.next()) {
			nbr = rs1.getString(1).trim();

		}
		if (nbr.equals("0")) {
			parametre1Form
					.setHiddenTest("Warehouse inexistant veuillez vérifier sa désignation !");
			return mapping.findForward("parametrwarehouse");
		}

		if (code.equals(""))
			rs1 = st1
					.executeQuery("select t.whs_id  from gss_warehouse t where t.whs_adresse='"
							+ libelle + "'");
		while (rs1.next()) {
			code = rs1.getString(1).trim();

		}

		try {
			System.out.println("update gss_warehouse w  set w.whs_status='"
					+ update_active + "' where w.whs_id='" + code + "'");
			int h = st
					.executeUpdate("update gss_warehouse w  set w.whs_status='"
							+ update_active + "' where w.whs_id='" + code + "'");
			int h2 = st.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
					+ code + "','','',sysdate,'" + update_active
					+ "',(select act_id from gss_actor a where a.act_name='"
					+ acteur + "'))");
			parametre1Form.setHiddenTest(update_active);
			con.commit();
			con.close();
		} catch (SQLException ex) {
			System.out.println("y'a un prob ");
			ex.printStackTrace();

			con.rollback();
			con.close();
			throw ex;
		}

		finally {
			con.close();
		}

		parametre1Form.setCode("");
		parametre1Form.setLibelle("");
		parametre1Form.setType("");
		parametre1Form.setRegion("");

		return mapping.findForward("parametrwarehouse");
	}

	public ActionForward supprimerwarehouse(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException,
			ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds supprimer");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1 = null;
		ResultSet rs, rs1 = null;
		String update_active = null, nbr = null;
		List list = new ArrayList();
		int cpt = 0;
		st1 = con.createStatement();
		con.setAutoCommit(false);

		String code = parametre1Form.getCode();
		System.out.println(code);

		String libelle = parametre1Form.getLibelle();
		System.out.println(libelle);

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		rs1 = st1
				.executeQuery("select  count(*) from gss_warehouse t  where t.whs_adresse='"
						+ libelle + "'");
		while (rs1.next()) {
			nbr = rs1.getString(1).trim();

		}
		if (nbr.equals("0")) {
			parametre1Form
					.setHiddenTest("Warehouse inexistant veuillez vérifier sa désignation !");
			return mapping.findForward("parametrwarehouse");
		}

		if (code.equals(""))
			rs1 = st1
					.executeQuery("select t.whs_id  from gss_warehouse t where t.whs_adresse='"
							+ libelle + "'");
		while (rs1.next()) {
			code = rs1.getString(1).trim();

		}

		try {

			st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			System.out
					.println("select t.whs_id from gss_transaction t where t.whs_id='"
							+ code + "'");
			rs = st.executeQuery("select t.whs_id from gss_transaction t where t.whs_id='"
					+ code + "'");
			rs.last();
			cpt = rs.getRow();
			System.out.println("le nombre d'enregistremet=" + cpt);
		}

		catch (SQLException ex) {
			System.out.println("le warehouse n'est dans aucune transaction");
		}

		if (cpt == 0)

		{
			try {
				System.out
						.println("delete from gss_warehouse w where w.whs_id='"
								+ code + "'");
				int h = st1
						.executeUpdate("delete from gss_warehouse w where w.whs_id='"
								+ code + "'");

				int h2 = st1
						.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
								+ code
								+ "','','',sysdate,'suppression',(select act_id from gss_actor a where a.act_name='"
								+ acteur + "'))");
				parametre1Form.setHiddenTest("Le warehouse " + libelle
						+ " a été supprimé ");
				System.out.println("Le warehouse " + libelle
						+ " a été supprimé ");

				con.commit();
				con.close();
			} catch (SQLException ex) {
				System.out.println("y'a un prob ");
				ex.printStackTrace();

				con.rollback();
				con.close();
				throw ex;

			} finally {
				con.close();
			}
		}

		else

		{
			System.out
					.println("Impossible de supprimer cer article car des transaction porte son code");
			parametre1Form
					.setHiddenTest("Impossible de supprimer ce warehouse car des transactions porte son code");

		}

		parametre1Form.setCode("");
		parametre1Form.setLibelle("");
		parametre1Form.setType("");
		parametre1Form.setRegion("");

		return mapping.findForward("parametrwarehouse");

	}

	public ActionForward ajouterwarehouse(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException,
			ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds ajouter");

		Statement st, st1, st2 = null;
		ResultSet rs, rs1, rs2 = null;

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);
		st1 = con.createStatement();
		st2 = con.createStatement();
		con.setAutoCommit(true);
		String code_type = null;
		String code_article = null;
		String code_article_base = null;

		int max = 0;

		String code = parametre1Form.getCode();
		System.out.println(code);

		String lib = parametre1Form.getLibelle();
		System.out.println(lib);

		String type = parametre1Form.getType();
		System.out.println(type);

		String region = parametre1Form.getRegion();
		System.out.println(region);

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		int cpt = 0;

		try {

			st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			System.out
					.println("select w.whs_adresse from gss_warehouse w where w.whs_adresse='"
							+ lib + "'");
			rs = st.executeQuery("select w.whs_adresse from gss_warehouse w where w.whs_adresse='"
					+ lib + "'");
			rs.last();
			cpt = rs.getRow();
			System.out.println("le nombre d'enregistremet=" + cpt);
		}

		catch (SQLException ex) {
			System.out.println("le warehouse n'exist pas ");
		}

		if (cpt == 0)

		{

			try {

				rs2 = st2.executeQuery("select w.whs_id from gss_warehouse w ");

				while (rs2.next()) {
					code_article_base = rs2.getString(1).trim();

					System.out.println(code_article_base);
					String code_id = code_article_base.substring(1, 3);

					int R1 = Integer.parseInt(code_id);
					if (R1 > max) {
						max = R1;
					}
				}

				max = max + 1;
				String res = Integer.toString(max);
				System.out.println(res);

				if (max >= 10) {
					code_article = "W" + res;
					System.out.println("codacteur" + code_article);

				}

				else {
					code_article = "W" + "0" + res;

				}
			}

			catch (Exception e) {
				code_article = "W01";
				System.out.println("le 1er acteur");
			}

			try {
				System.out.println("insert into gss_warehouse values('"
						+ code_article + "','" + type + "','" + region + "','"
						+ lib + "','A')");
				int h = st1.executeUpdate("insert into gss_warehouse values('"
						+ code_article + "','" + type + "','" + region + "','"
						+ lib + "','A')");
				int h2 = st1
						.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
								+ code_article
								+ "','','',sysdate,'Insertion',(select act_id from gss_actor a where a.act_name='"
								+ acteur + "'))");
				parametre1Form.setHiddenTest("L'article " + lib
						+ " a été ajouté  ");
				System.out.println("Le warehouse " + lib + " a été ajouté ");
				con.commit();
				con.close();

			} catch (SQLException ex) {
				System.out.println("y'a un prob ");
				ex.printStackTrace();

				con.rollback();
				con.close();
				throw ex;

			}

			finally {
				con.close();
			}
		}

		else

		{
			System.out.println("ce warehouse  existe déjà");
			parametre1Form.setHiddenTest("ce warehouse existe déjà ");

		}

		parametre1Form.setCode("");
		parametre1Form.setLibelle("");
		parametre1Form.setType("");
		parametre1Form.setRegion("");

		return mapping.findForward("parametrwarehouse");

	}

	public ActionForward afficheraricle(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException, ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds parametre");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1 = null;
		ResultSet rs, rs1 = null;
		ArrayList list = new ArrayList();
		ArrayList listId = new ArrayList();
		ArrayList listLibe = new ArrayList();
		st = con.createStatement();

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		rs = st.executeQuery("select a.art_id,a.art_art_libelle,decode(a.art_status,'A','Actif','I','Inactif','_'),nvl(a.consomation_j_t,0) from gss_article a order by art_art_libelle ");
		parametre1Form.getLisTypeId();
		while (rs.next())

		{
			Ordre ordre = new Ordre();
			String acticle = rs.getString(2).trim();
			System.out.println(acticle);

			String activer = rs.getString(3).trim();
			System.out.println(activer);

			String code = rs.getString(1).trim();
			System.out.println(code);

			String consommation = rs.getString(4).trim();
			System.out.println(consommation);

			/*
			 * String consommation=getResult(rs.getString(4));
			 * System.out.println( "consommation="+consommation);
			 */

			ordre.setUser(acticle);
			ordre.setAprob(activer);
			ordre.setCode(code);
			ordre.setConsommation(Integer.parseInt(consommation));
			list.add(ordre);

		}

		parametre1Form.setListacteur(list);
		rs1 = st.executeQuery("select t.art_type_id,t.art_type_libelle from gss_article_type t where t.status='A'");
		while (rs1.next())
		{
			listId.add(rs1.getString(1));
			listLibe.add(rs1.getString(2));
		}
		
		parametre1Form.setLisTypeId(listId);
		parametre1Form.setLisTypeLib(listLibe);
		parametre1Form.setCode("");
		parametre1Form.setLibelle("");
		parametre1Form.setCategorie("");
		parametre1Form.setType("");
		parametre1Form.setTaille("");
		parametre1Form.setConsommation(0);
		parametre1Form.setHiddenTest("");
		parametre1Form.setWritparam("Paramétrage article:");

		con.close();

		return mapping.findForward("parametreartcle");

	}

	public ActionForward activerarticle(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException, ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds activer");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1 = null;
		ResultSet rs, rs1 = null;
		String update_active = null;
		List list = new ArrayList();
		st = con.createStatement();
		con.setAutoCommit(true);

		String activation = parametre1Form.getActiver();
		System.out.println(activation);

		String code = parametre1Form.getCode();
		System.out.println(code);

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		if (activation.equals("Actif")) {
			update_active = "I";
		}
		if (activation.equals("Inactif")) {
			update_active = "A";
		}

		try {
			System.out.println("update gss_article  a set a.art_status='"
					+ update_active + "' where a.art_id='" + code + "'");
			int h = st.executeUpdate("update gss_article  a set a.art_status='"
					+ update_active + "' where a.art_id='" + code + "'");

			int h2 = st.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
					+ code + "','','',sysdate,'" + update_active
					+ "',(select act_id from gss_actor a where a.act_name='"
					+ acteur + "'))");
			parametre1Form.setHiddenTest(update_active);

			con.commit();
			con.close();

		} catch (SQLException ex) {
			System.out.println("y'a un prob ");
			ex.printStackTrace();

			con.rollback();
			con.close();
			throw ex;

		}

		finally {
			con.close();
		}

		parametre1Form.setCode("");
		parametre1Form.setLibelle("");
		parametre1Form.setType("");
		parametre1Form.setCategorie("");
		parametre1Form.setConsommation(0);
		parametre1Form.setTaille("");

		return mapping.findForward("parametreartcle");

	}

	public ActionForward supprimerartcle(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException,
			ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds supprimer");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1 = null;
		ResultSet rs, rs1 = null;
		String update_active = null;
		List list = new ArrayList();
		int cpt = 0;
		st1 = con.createStatement();
		con.setAutoCommit(false);

		String code = parametre1Form.getCode();
		System.out.println(code);

		String libelle = parametre1Form.getLibelle();
		System.out.println(libelle);

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		try {

			st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			System.out
					.println("select  r.art_id from gss_range r where r.art_id='"
							+ code + "'");
			rs = st.executeQuery("select  r.art_id from gss_range r where r.art_id='"
					+ code + "'");
			rs.last();
			cpt = rs.getRow();
			System.out.println("le nombre d'enregistremet=" + cpt);
		}

		catch (SQLException ex) {
			System.out.println("l'article n'est dans aucun rang");
		}

		if (cpt == 0)

		{
			try {
				System.out
						.println("delete from gss_article a  where a.art_id='"
								+ code + "'");
				int h = st1
						.executeUpdate("delete from gss_article a  where a.art_id='"
								+ code + "'");

				int h2 = st1
						.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
								+ code
								+ "','','',sysdate,'suppression',(select act_id from gss_actor a where a.act_name='"
								+ acteur + "'))");
				parametre1Form.setHiddenTest("L'article " + libelle
						+ " a été supprimé ");
				System.out.println("Le distributeur " + libelle
						+ " a été supprimé ");

				con.commit();
				con.close();

			} catch (SQLException ex) {
				System.out.println("y'a un prob ");
				ex.printStackTrace();

				con.rollback();
				con.close();
				throw ex;

			}

			finally {
				con.close();
			}
		}

		else

		{
			System.out
					.println("Impossible de supprimer cer article car des rangs porte son code");
			parametre1Form
					.setHiddenTest("Impossible de supprimer cer article car des rangs porte son code");

		}

		parametre1Form.setCode("");
		parametre1Form.setLibelle("");
		parametre1Form.setType("");
		parametre1Form.setCategorie("");
		parametre1Form.setConsommation(0);
		parametre1Form.setTaille("");

		return mapping.findForward("parametreartcle");

	}

	public ActionForward modifierarticle(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException,
			ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds ajouter");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1 = null;
		ResultSet rs, rs1 = null;
		String update_active = null;
		List list = new ArrayList();
		int cpt = 0;
		st1 = con.createStatement();
		con.setAutoCommit(false);

		String code = parametre1Form.getCode();
		System.out.println(code);

		Integer consommation = parametre1Form.getConsommation();
		System.out.println(consommation);
		String lib = parametre1Form.getLibelle();
		System.out.println(lib);

		try {
			System.out.println("update gss_article a set a.consomation_j_t='"
					+ consommation + "' where a.art_id='" + code + "'");
			int h = st1
					.executeUpdate("update gss_article a set a.consomation_j_t='"
							+ consommation + "' where a.art_id='" + code + "'");
			parametre1Form
					.setHiddenTest("La consommation journalière de larticle"
							+ lib + " a été modifié");
			System.out.println("La consommation journalière de larticle" + lib
					+ " à été modifié");

			con.commit();
			con.close();

		} catch (SQLException ex) {
			System.out.println("y'a un prob ");
			ex.printStackTrace();

			con.rollback();
			con.close();
			throw ex;

		}

		finally {
			con.close();
		}

		parametre1Form.setCode("");
		parametre1Form.setLibelle("");
		parametre1Form.setType("");
		parametre1Form.setCategorie("");
		parametre1Form.setConsommation(0);
		parametre1Form.setTaille("");

		return mapping.findForward("parametreartcle");

	}

	public ActionForward ajouterarticle(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException, ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds ajouter");

		Statement st, st1, st2 = null;
		ResultSet rs, rs1, rs2 = null;

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);
		st1 = con.createStatement();
		st2 = con.createStatement();

		String code_type = null;
		String code_article = null;
		String code_article_base = null;

		int max = 0;

		String code = parametre1Form.getCode();
		System.out.println(code);

		String lib = parametre1Form.getLibelle();
		System.out.println(lib);

		String type = parametre1Form.getType();
		System.out.println(type);

		String taille = parametre1Form.getTaille();
		System.out.println("taille" + taille);

		String categorie = parametre1Form.getCategorie();
		System.out.println("catégorie" + categorie);

		Integer consommation = parametre1Form.getConsommation();
		System.out.println("consommation" + consommation);

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		if (type.equals("SIM") && categorie.equals("PRE")) {
			code_type = "S2";
		}
		if (type.equals("SIM") && categorie.equals("POST")) {
			code_type = "S1";
		}

		if (type.equals("SCRATCH")) {
			code_type = "S3";
		}

		if (type.equals("E_VOUTCHER")) {
			code_type = "S4";
		}

		int cpt = 0;

		try {
			rs2 = st2
					.executeQuery("select a.art_art_libelle from gss_article  a where a.art_art_libelle='"
							+ lib + "'");

		} catch (SQLException ex) {
			System.out.println("l'article  n'exist pas ");
		}

		try {

			st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			System.out
					.println("select a.art_art_libelle from gss_article  a where a.art_art_libelle='"
							+ lib + "'");
			rs = st.executeQuery("select a.art_art_libelle from gss_article  a where a.art_art_libelle='"
					+ lib + "'");
			rs.last();
			cpt = rs.getRow();
			System.out.println("le nombre d'enregistremet=" + cpt);
		}

		catch (SQLException ex) {
			System.out.println("l'article  n'exist pas ");
		}

		if (cpt == 0)

		{

			try {

				rs2 = st2.executeQuery("select a.art_id from gss_article a ");

				while (rs2.next()) {
					code_article_base = rs2.getString(1).trim();

					System.out.println(code_article_base);
					String code_id = code_article_base.substring(1, 3);

					int R1 = Integer.parseInt(code_id);
					if (R1 > max) {
						max = R1;
					}
				}

				max = max + 1;
				String res = Integer.toString(max);
				System.out.println(res);

				if (max >= 10) {
					code_article = "T" + res;
					System.out.println("codacteur" + code_article);

				}

				else {
					code_article = "T" + "0" + res;

				}
			}

			catch (Exception e) {
				code_article = "T01";
				System.out.println("le 1er acteur");
			}

			try {
				System.out.println("insert into gss_article a values('"
						+ code_article + "','" + lib + "','" + taille
						+ "','A','" + code_type + "','','" + consommation
						+ "')')");
				int h = st1.executeUpdate("insert into gss_article a values('"
						+ code_article + "','" + lib + "','" + taille
						+ "','A','" + code_type + "','','" + consommation
						+ "')");
				int h2 = st1
						.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
								+ code_article
								+ "','','',sysdate,'Insertion',(select act_id from gss_actor a where a.act_name='"
								+ acteur + "'))");
				parametre1Form.setHiddenTest("L'article " + lib
						+ " a été ajouté  ");
				System.out.println("L'article " + lib + " a été ajouté ");

				con.commit();
				con.close();

			} catch (SQLException ex) {
				System.out.println("y'a un prob ");
				ex.printStackTrace();

				con.rollback();
				con.close();
				throw ex;

			}

			finally {
				con.close();
			}
		}

		else

		{
			System.out.println("Cet article  existe déjà");
			parametre1Form.setHiddenTest("cet article existe déjà ");

		}

		parametre1Form.setCode("");
		parametre1Form.setLibelle("");
		parametre1Form.setType("");
		parametre1Form.setCategorie("");
		parametre1Form.setConsommation(0);
		parametre1Form.setTaille("");

		return mapping.findForward("parametreartcle");

	}

	public ActionForward activer(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException, ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds activer");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1 = null;
		ResultSet rs, rs1 = null;
		String update_active = null;
		String etat_activation = null;
		List list = null;
		st = con.createStatement();

		String activation = parametre1Form.getActiver();
		System.out.println(activation);

		String code = parametre1Form.getCode();
		System.out.println(code);

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		if (activation.equals("Actif")) {
			update_active = "I";
			etat_activation = "Inactif";
		}
		if (activation.equals("Inactif")) {
			update_active = "A";
			etat_activation = "Actif";
		}

		try {
			System.out.println("update gss_destinataire d set d.dest_status='"
					+ update_active + "' where d.dest_id='" + code + "'");
			int h = st
					.executeUpdate("update gss_destinataire d set d.dest_status='"
							+ update_active
							+ "' where d.dest_id='"
							+ code
							+ "'");

			int h2 = st.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
					+ code + "','','',sysdate,'" + update_active
					+ "',(select act_id from gss_actor a where a.act_name='"
					+ acteur + "'))");
			parametre1Form.setHiddenTest(update_active);

			list = parametre1Form.getListacteur();

			for (int i = 0; i < list.size(); i++) {

				Ordre ordre = (Ordre) list.get(i);
				if (ordre.getCode().equals(code)) {
					ordre.setAprob(etat_activation);
					list.set(i, ordre);
				}
			}
			parametre1Form.setListacteur(list);

		} catch (SQLException ex) {
			System.out.println("y'a un prob ");
			ex.printStackTrace();

			con.rollback();
			con.close();
			throw ex;

		} finally {
			con.close();
		}

		// parametre1Form.setCode("");
		// parametre1Form.setLibelle("");
		parametre1Form.setRegion("");

		return mapping.findForward("parametre");

	}

	public ActionForward supprimer(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException, ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds supprimer");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1 = null;
		ResultSet rs, rs1 = null;
		String update_active = null;
		List list = new ArrayList();
		int cpt = 0;
		st1 = con.createStatement();

		String code = parametre1Form.getCode();
		System.out.println(code);

		String lib = parametre1Form.getLibelle();
		System.out.println(lib);

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		try {

			st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			System.out
					.println("select t.dest_id from gss_transaction t where t.dest_id='"
							+ code + "'");
			rs = st.executeQuery("select t.dest_id from gss_transaction t where t.dest_id='"
					+ code + "'");
			rs.last();
			cpt = rs.getRow();
			System.out.println("le nombre d'enregistremet=" + cpt);
		}

		catch (SQLException ex) {
			System.out.println("l'acteur n'a pas fait des transactions");
		}

		if (cpt == 0)

		{
			try {
				System.out
						.println("delete from gss_destinataire d where d.dest_id='"
								+ code + "'");
				int h = st1
						.executeUpdate("delete from gss_destinataire d where d.dest_id='"
								+ code + "'");
				int h2 = st1
						.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
								+ code
								+ "','','',sysdate,'suppression',(select act_id from gss_actor a where a.act_name='"
								+ acteur + "'))");
				parametre1Form.setHiddenTest(code + "-" + lib
						+ " a été supprimé ");
				System.out.println(code + "-" + lib + " a été supprimé ");

			} catch (SQLException ex) {
				System.out.println("y'a un prob ");
				ex.printStackTrace();

				con.rollback();
				con.close();
				throw ex;

			}

			finally {
				con.close();
			}
		}

		else

		{
			System.out
					.println("Impossible de supprimer ce distributeur car des transactions porte son code");
			parametre1Form.setHiddenTest("Impossible de supprimer" + code + "-"
					+ lib + " car des transactions porte son code");

		}

		parametre1Form.setCode("");
		parametre1Form.setLibelle("");
		parametre1Form.setRegion("");

		return mapping.findForward("parametre");

	}

	public ActionForward ajouter(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException, ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds ajouter");

		Statement st, st1, st2 = null;
		ResultSet rs, rs1, rs2 = null;
		List list = null;

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);
		st1 = con.createStatement();
		st2 = con.createStatement();

		String param = (String) request.getSession().getAttribute("parametre");
		System.out.println("le parametre recupéré=" + param);

		String region = parametre1Form.getRegion();
		System.out.println(region);

		String code = parametre1Form.getWritcode2();
		System.out.println(code);

		String lib = parametre1Form.getLibelle();
		System.out.println(lib);

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		int cpt = 0, max = 0;
		String code_warehouse_base = null, code_warehouse = null;

		if (param.equals("PARTENAIRE")) {
			try {

				rs2 = st2.executeQuery("select w.whs_id from gss_warehouse w ");
				while (rs2.next()) {
					code_warehouse_base = rs2.getString(1).trim();

					System.out.println(code_warehouse_base);
					String code_id = code_warehouse_base.substring(1, 3);

					int R1 = Integer.parseInt(code_id);
					if (R1 > max) {
						max = R1;
					}
				}

				max = max + 1;
				String res = Integer.toString(max);
				System.out.println(res);

				if (max >= 10) {
					code_warehouse = "W" + res;
					System.out.println("codacteur" + code_warehouse);
				}

				else {
					code_warehouse = "W" + "0" + res;

				}
			}

			catch (Exception e) {
				code_warehouse = "W01";
				System.out.println("le 1er acteur");
			}

		}
		try {

			st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			System.out
					.println("select d.dest_id from gss_destinataire d where d.dest_id='"
							+ code + "'");
			rs = st.executeQuery("select d.dest_id from gss_destinataire d where d.dest_id='"
					+ code + "'");
			rs.last();
			cpt = rs.getRow();
			System.out.println("le nombre d'enregistremet=" + cpt);
		}

		catch (SQLException ex) {
			System.out.println(" le distributeur n'exist pas ");
		}

		if (cpt == 0)

		{
			try {

				if (param.equals("PARTENAIRE")) {
					String libwarehouse = lib + "_WAREHOUSE";
					System.out.println("insert into gss_warehouse values('"
							+ code_warehouse + "','','','" + libwarehouse
							+ "','A')");
					System.out
							.println("insert into gss_destinataire d values ('"
									+ code + "','" + lib + "','" + param
									+ "','A','" + region + "','"
									+ code_warehouse + "')");
					int h = st1
							.executeUpdate("insert into gss_warehouse values('"
									+ code_warehouse
									+ "','sous_traitant','sous_traitant','"
									+ libwarehouse + "','A')");
					int h1 = st1
							.executeUpdate("insert into gss_destinataire d values ('"
									+ code
									+ "','"
									+ lib
									+ "','"
									+ param
									+ "','A','"
									+ region
									+ "','"
									+ code_warehouse + "')");

				} else {
					System.out
							.println("insert into gss_destinataire d values ('"
									+ code + "','" + lib + "','" + param
									+ "','A','" + region + "','')");
					int h = st1
							.executeUpdate("insert into gss_destinataire d values ('"
									+ code
									+ "','"
									+ lib
									+ "','"
									+ param
									+ "','A','" + region + "','')");
				}

				int h2 = st1
						.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
								+ code
								+ "','','',sysdate,'Insertion',(select act_id from gss_actor a where a.act_name='"
								+ acteur + "'))");

				parametre1Form.setHiddenTest(code + "-" + lib
						+ "  a été ajouté ");
				System.out.println(code + "-" + lib + "  a été ajouté");

				list = parametre1Form.getListacteur();
				Ordre ordre = new Ordre();
				ordre.setCode(code);
				ordre.setUser(lib);
				ordre.setAprob("actif");
				list.add(ordre);

				parametre1Form.setListacteur(list);

			} catch (SQLException ex) {
				System.out.println("y'a un prob ");
				ex.printStackTrace();

				con.rollback();
				con.close();
				throw ex;

			}

			finally {
				con.close();
			}
		}

		else

		{
			System.out.println("Ce distributeur existe déjà");
			parametre1Form.setHiddenTest("le code" + code + " existe déjà ");

		}

		parametre1Form.setCode("");
		parametre1Form.setLibelle("");
		parametre1Form.setRegion("");
		return mapping.findForward("parametre");

	}

	public ActionForward modifacteur(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException, ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds parametre");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1, st2, st3, st4 = null;
		ResultSet rs, rs1, rs2, rs3, rs4 = null;
		String act = null;
		int max = 0;
		Boolean trouv = false, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 = false;

		boolean admincds, admindist, adminsrtdvrs, adminwrhs, adminfrns, adminprtnr, adminartcl, recepaccwithoi;

		Boolean v1, v2, v3 = false;
		Boolean s1, s2, s3, s4 = false;
		Boolean stockcontrol, edition, approbateur = false;

		int h1 = 0, h2 = 0;
		String code_user = null;

		st = con.createStatement();
		st1 = con.createStatement();
		st2 = con.createStatement();
		con.setAutoCommit(false);

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		admincds = parametre1Form.getAdmincds();
		admindist = parametre1Form.getAdmindist();
		adminsrtdvrs = parametre1Form.getAdminsrtdvrs();
		adminwrhs = parametre1Form.getAdminwrhs();
		adminfrns = parametre1Form.getAdminfrns();
		adminprtnr = parametre1Form.getAdminprtnr();
		adminartcl = parametre1Form.getAdminartcl();
		recepaccwithoi = parametre1Form.getRecepaccwithoi();

		p1 = parametre1Form.getMagaberaki();
		System.out.println(p1);

		p2 = parametre1Form.getSuperviseur_cds();
		System.out.println(p2);

		p3 = parametre1Form.getSuperviseur_compte();
		System.out.println(p3);

		p4 = parametre1Form.getSuperdist();
		System.out.println(p4);

		p5 = parametre1Form.getSupereport();
		System.out.println(p5);

		p6 = parametre1Form.getSuperpre();
		System.out.println(p6);

		p7 = parametre1Form.getSuperpost();
		System.out.println(p7);

		p8 = parametre1Form.getAdmin();
		System.out.println(p8);

		s1 = parametre1Form.getCharge();
		System.out.println(s1);
		s2 = parametre1Form.getCoordinateur();
		System.out.println(s2);
		s3 = parametre1Form.getSales();
		System.out.println(s3);
		s4 = parametre1Form.getTresor();
		System.out.println(s4);

		stockcontrol = parametre1Form.getStockcontrol();
		System.out.println(stockcontrol);

		edition = parametre1Form.getEdition();
		System.out.println(edition);
		approbateur = parametre1Form.getApprobateur();

		String cds = parametre1Form.getCds();
		String dist = parametre1Form.getDistributeur();
		String region = parametre1Form.getRegion();
		String magasin = parametre1Form.getWarehouse();

		String nom_user = parametre1Form.getLibelle();
		System.out.println("nom_user" + nom_user);

		System.out.println("je fais appel a la methode rechercher_acteur");

		code_user = rechercher_acteur(request, nom_user);
		System.out.println("code_user" + code_user);

		if (code_user.equals("user not found")) {
			System.out.println("user n'existe pas");
			parametre1Form.setHiddenTest("Cet utilisateur nexiste pas ");

			initialisation_champ(form);
			return mapping.findForward("acteur");

		}

		/*
		 * rs1=st1.executeQuery("select act_id from gss_actor a where
		 * a.act_name='"+nom_user+"'"); while (rs1.next()) {
		 * code_user=rs1.getString(1).trim() ;
		 * System.out.println("code_user"+code_user); }
		 */

		else {
			try {

				if (admincds) {

					String req = "insert into gss_droit_acces values ('"
							+ code_user + "','PR21',SYSDATE,'W00')";
					System.out.println(req);
					h1 = st2.executeUpdate(req);
					req = req.replace("'", "''");

					h2 = st1.executeUpdate("insert into dblog  values ('"
							+ acteur + "','" + req
							+ "','gss_droit_acces',sysdate)");

				}
				
				if (admindist) {

					String req = "insert into gss_droit_acces values ('"
							+ code_user + "','PR22',SYSDATE,'W00')";
					System.out.println(req);
					h1 = st2.executeUpdate(req);
					req = req.replace("'", "''");

					h2 = st1.executeUpdate("insert into dblog  values ('"
							+ acteur + "','" + req
							+ "','gss_droit_acces',sysdate)");

				}
				if (adminsrtdvrs) {

					String req = "insert into gss_droit_acces values ('"
							+ code_user + "','PR23',SYSDATE,'W00')";
					System.out.println(req);
					h1 = st2.executeUpdate(req);
					req = req.replace("'", "''");

					h2 = st1.executeUpdate("insert into dblog  values ('"
							+ acteur + "','" + req
							+ "','gss_droit_acces',sysdate)");

				}
				if (adminwrhs) {

					String req = "insert into gss_droit_acces values ('"
							+ code_user + "','PR24',SYSDATE,'W00')";
					System.out.println(req);
					h1 = st2.executeUpdate(req);
					req = req.replace("'", "''");

					h2 = st1.executeUpdate("insert into dblog  values ('"
							+ acteur + "','" + req
							+ "','gss_droit_acces',sysdate)");

				}
				if (adminfrns) {

					String req = "insert into gss_droit_acces values ('"
							+ code_user + "','PR25',SYSDATE,'W00')";
					System.out.println(req);
					h1 = st2.executeUpdate(req);
					req = req.replace("'", "''");
					

					h2 = st1.executeUpdate("insert into dblog  values ('"
							+ acteur + "','" + req
							+ "','gss_droit_acces',sysdate)");

				}
				if (adminprtnr) {

					String req = "insert into gss_droit_acces values ('"
							+ code_user + "','PR26',SYSDATE,'W00')";
					System.out.println(req);
					h1 = st2.executeUpdate(req);
					req = req.replace("'", "''");

					h2 = st1.executeUpdate("insert into dblog  values ('"
							+ acteur + "','" + req
							+ "','gss_droit_acces',sysdate)");

				}
				if (adminartcl) {

					String req = "insert into gss_droit_acces values ('"
							+ code_user + "','PR27',SYSDATE,'W00')";
					System.out.println(req);
					h1 = st2.executeUpdate(req);
					req = req.replace("'", "''");

					h2 = st1.executeUpdate("insert into dblog  values ('"
							+ acteur + "','" + req
							+ "','gss_droit_acces',sysdate)");

				}
				if (recepaccwithoi) {

					String req = "insert into gss_droit_acces values ('"
							+ code_user + "','PR28',SYSDATE,'W00')";
					System.out.println(req);
					h1 = st2.executeUpdate(req);
					req = req.replace("'", "''");

					h2 = st1.executeUpdate("insert into dblog  values ('"
							+ acteur + "','" + req
							+ "','gss_droit_acces',sysdate)");

				}
				

				if (p1 == true) {
					System.out.println("profil de magasinier");
					System.out
							.println("insert into gss_droit_acces values ('"
									+ code_user
									+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='MAGASINIER CENTRAL'),SYSDATE,(select w.whs_id from gss_warehouse w where trim(w.whs_adresse)=trim('"+magasin+"'))      )");
					System.out
							.println("insert into HISTORIQUE_ADMIN values ('"
									+ code_user
									+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='MAGASINIER CENTRAL'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
									+ acteur + "'))");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='MAGASINIER CENTRAL'),SYSDATE,(select w.whs_id from gss_warehouse w where trim(w.whs_adresse)=trim('"+magasin+"')))");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='MAGASINIER CENTRAL'),(select w.whs_id from gss_warehouse w where trim(w.whs_adresse)=trim('"+magasin+"')),sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");

				}

				if (p2 == true) {

					System.out.println("sup cds");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR CDS'),SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR CDS'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}

				if (p3 == true) {

					System.out.println("sup  distributeur");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR DE COMPTE'),SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR DE COMPTE'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");

				}

				if (p4 == true) {

					System.out.println("superdis");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR DISTRIBUTION'),SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR DISTRIBUTION'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}

				if (p5 == true) {

					System.out.println("superreport");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR REPORTING'),SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR REPORTING'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}

				if (p6 == true) {

					System.out.println("superpre");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR PREPAID'),SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR PREPAID'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}

				if (p7 == true) {

					System.out.println("superpost");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR POSTPAID'),SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR POSTPAID'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}
				if (p8 == true) {

					System.out.println("administrateur");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user + "','PR01',SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='ADMINISTRATEUR'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}

				if (s1 == true) {

					System.out.println("charge");
					System.out
							.println("insert into gss_droit_acces values ('"
									+ code_user
									+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='CHARGE DE COMPTE'),SYSDATE,'','W00')");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='CHARGE DE COMPTE'),SYSDATE,(select d.dest_id from  gss_destinataire d where d.dest_nom='"
							+ dist
							+ "' and d.dest_type not in ('FOURNISSEUR','PARTENAIRE')))");

					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='CHARGE DE COMPTE'),(select d.dest_id from  gss_destinataire d where d.dest_nom='"
							+ dist
							+ "' and d.dest_type not in ('FOURNISSEUR','PARTENAIRE')),sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}

				if (s2 == true) {

					System.out.println("COORDINATEUR");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='COORDINATEUR REGION'),SYSDATE,'"
							+ region + "')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='COORDINATEUR REGION'),'"
							+ region
							+ "',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}

				if (s3 == true) {

					System.out
							.println("insert into gss_droit_acces values ('"
									+ code_user
									+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SALES SUPPORT'),SYSDATE,'','W00')");
					System.out.println("SALES SUPPORT");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='RESPONSABLE CDS'),SYSDATE,(select d.dest_id from  gss_destinataire d where d.dest_nom='"
							+ cds + "'))");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='RESPONSABLE CDS'),(select d.dest_id from  gss_destinataire d where d.dest_nom='"
							+ cds
							+ "'),sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}

				if (s4 == true) {

					System.out.println("TRESORIER");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='TRESORIER'),SYSDATE,'W00')");

					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='TRESORIER'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}

				if (stockcontrol == true) {

					System.out.println("stockcontrol");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='STOCK CONTROL'),SYSDATE,'W00')");

					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='STOCK CONTROL'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}

				if (edition == true) {

					System.out.println("edition");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='EDITION DES RAPPORTS'),SYSDATE,'W00')");

					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='EDITION DES RAPPORTS'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}

				if (approbateur == true) {

					System.out.println("approbateur    -------------");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='APPROBATEUR'),SYSDATE,'W00')");

					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ code_user
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='APPROBATEUR'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur + "'))");
				}

				con.commit();

				try {
					ArrayList list = new ArrayList();
					System.out
							.println("select p.profil_act_libelle||' '||decode(w.whs_adresse,'AUCUN','',w.whs_adresse)||' '||d.dest_nom,t.profil_act_id,t.whs_id  from gss_actor a ,gss_droit_acces t,gss_profil_actor p,gss_warehouse w,gss_destinataire d  where t.act_id=a.act_id and t.profil_act_id=p.profil_act_id  and w.whs_id(+)=t.whs_id  and substr(t.whs_id,1,3)=d.dest_id(+) and a.act_name='"
									+ nom_user + "' ");
					rs = st.executeQuery("select p.profil_act_libelle||' '||decode(w.whs_adresse,'AUCUN','',w.whs_adresse)||' '||d.dest_nom,t.profil_act_id,nvl(t.whs_id,'W00')  from gss_actor a ,gss_droit_acces t,gss_profil_actor p,gss_warehouse w,gss_destinataire d  where t.act_id=a.act_id and t.profil_act_id=p.profil_act_id  and w.whs_id(+)=t.whs_id  and substr(t.whs_id,1,3)=d.dest_id(+) and a.act_name='"
							+ nom_user + "' ");
					while (rs.next()) {
						Profil profil = new Profil();
						String profil_user = rs.getString(1).trim();
						String prof = rs.getString(2).trim();
						String whs = rs.getString(3).trim();

						profil.setProfil_user(profil_user);
						profil.setProfil(prof);
						profil.setWhs(whs);
						profil.setSupprimer("supprimer le profil");
						list.add(profil);
					}

					parametre1Form.getListprofil_user().clear();
					parametre1Form.setListprofil_user(list);
				}

				catch (SQLException ex) {
					System.out.println(" l'acteur n'exist pas ");

					ex.printStackTrace();

					con.rollback();
					con.close();
					throw ex;

				}

				parametre1Form.setHiddenTest("Les profils ont été enregistrés");

			} catch (SQLException ex) {
				ex.printStackTrace();
				if (h1 == 0)
					System.out.println("le profil existe déja");

				// con.rollback();
				// con.close();
				// / throw ex;
			}

			finally {

				con.close();
				// initialiser les champs
				initialisation_champ(form);
			}

		}

		return mapping.findForward("acteur");

	}

	public ActionForward addacteur(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException, ServletException, NamingException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds parametre");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1, st2, st3, st4 = null;
		ResultSet rs, rs1, rs2, rs3, rs4 = null;
		String acteur, act = null;
		int max = 0;
		Boolean trouv = false, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10 = false;
		Boolean v1, v2, v3 = false;
		Boolean s1, s2, s3, s4 = false;
		Boolean stockcontrol, edition, approbateur = false;
		st = con.createStatement();
		st1 = con.createStatement();
		String code_user = null;
		int h1 = 0, h2 = 0;

		st1 = con.createStatement();
		st2 = con.createStatement();
		con.setAutoCommit(false);

		String acteur_update = (String) request.getSession().getAttribute(
				"username");
		System.out.println(acteur_update);

		String nom = parametre1Form.getLibelle();

		p1 = parametre1Form.getMagaberaki();
		System.out.println(p1);

		p2 = parametre1Form.getSuperviseur_cds();
		System.out.println(p2);

		p3 = parametre1Form.getSuperviseur_compte();
		System.out.println(p3);

		p4 = parametre1Form.getSuperdist();
		System.out.println(p4);

		p5 = parametre1Form.getSupereport();
		System.out.println(p5);

		p6 = parametre1Form.getSuperpre();
		System.out.println(p6);

		p7 = parametre1Form.getSuperpost();
		System.out.println(p7);

		p8 = parametre1Form.getAdmin();
		System.out.println(p8);

		s1 = parametre1Form.getCharge();
		System.out.println(s1);
		s2 = parametre1Form.getCoordinateur();
		System.out.println(s2);
		s3 = parametre1Form.getSales();
		System.out.println(s3);
		s4 = parametre1Form.getTresor();
		System.out.println(s4);
		stockcontrol = parametre1Form.getStockcontrol();
		System.out.println(stockcontrol);

		edition = parametre1Form.getEdition();
		System.out.println(edition);

		approbateur = parametre1Form.getApprobateur();

		String cds = parametre1Form.getCds();
		String dist = parametre1Form.getDistributeur();
		String region = parametre1Form.getRegion();
		String magasin = parametre1Form.getWarehouse();

		System.out.println("je fais appel a la methode rechercher_acteur");

		code_user = rechercher_acteur(request, nom);
		System.out.println("code_user" + code_user);

		if (code_user.equals("user not found")) {
			System.out.println("user n'existe pas");
			parametre1Form.setHiddenTest("Cet utilisateur nexiste pas ");

			try {

				rs = st.executeQuery(" select act_id from gss_actor");

				while (rs.next()) {
					act = rs.getString(1).trim();

					System.out.println(act);
					String code = act.substring(1);

					int R1 = Integer.parseInt(code);
					if (R1 > max) {
						max = R1;
					}
				}

				max = max + 1;
				String res = Integer.toString(max);
				System.out.println(res);

				if (max >= 10) {
					acteur = "A" + res;
					System.out.println("codacteur" + acteur);

				}

				else {
					acteur = "A" + "0" + res;

				}
			}

			catch (Exception e) {
				acteur = "A01";
				System.out.println("le 1er acteur");
			}

			finally {
				// initialiser les champs
				initialisation_champ(form);
			}

			// String nom=parametreForm.getActeur();

			try {

				System.out.println("insert into gss_actor values ('" + acteur
						+ "','" + nom + "','A','')");
				/*int h7 = st1.executeUpdate("insert into gss_actor2 values ('"
						+ acteur + "','" + nom + "')");
						*/
				int h = st1.executeUpdate("insert into gss_actor values ('"
						+ acteur + "','" + nom + "','A','')");

				if (p1 == true) {
					System.out.println("profil de magasinier");
					System.out
							.println("insert into gss_droit_acces values ('"
									+ acteur
									+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='MAGASINIER CENTRAL'),SYSDATE,(select w.whs_id from gss_warehouse w where w.whs_adresse='"+magasin+"')");
					System.out
							.println("insert into HISTORIQUE_ADMIN values ('"
									+ acteur
									+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='MAGASINIER CENTRAL'),(select w.whs_id from gss_warehouse w where w.whs_adresse='"+magasin+"'),sysdate,'insertion')");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='MAGASINIER CENTRAL'),SYSDATE,(select w.whs_id from gss_warehouse w where w.whs_adresse='"+magasin+"'))");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='MAGASINIER CENTRAL'),(select w.whs_id from gss_warehouse w where w.whs_adresse='"+magasin+"'),sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");

				}

				if (p2 == true) {

					System.out.println("sup cds");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR CDS'),SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR CDS'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}

				if (p3 == true) {

					System.out.println("sup  distributeur");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR DE COMPTE'),SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR DE COMPTE'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");

				}

				if (p4 == true) {

					System.out.println("superdis");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR DISTRIBUTION'),SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR DISTRIBUTION'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}

				if (p5 == true) {

					System.out.println("superreport");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR REPORTING'),SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR REPORTING'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}

				if (p6 == true) {

					System.out.println("superpre");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR PREPAID'),SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR PREPAID'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}

				if (p7 == true) {

					System.out.println("superpost");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR POSTPAID'),SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SUPERVISEUR POSTPAID'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}
				if (p8 == true) {

					System.out.println("administrateur");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur + "','PR01',SYSDATE,'W00')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='ADMINISTRATEUR'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}

				if (s1 == true) {

					System.out.println("charge");
					System.out
							.println("insert into gss_droit_acces values ('"
									+ acteur
									+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='CHARGE DE COMPTE'),SYSDATE,'','W00')");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='CHARGE DE COMPTE'),SYSDATE,(select d.dest_id from  gss_destinataire d where d.dest_nom='"
							+ dist
							+ "' and d.dest_type not in ('FOURNISSEUR','PARTENAIRE')))");

					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='CHARGE DE COMPTE'),(select d.dest_id from  gss_destinataire d where d.dest_nom='"
							+ dist
							+ "' and d.dest_type not in ('FOURNISSEUR','PARTENAIRE')),sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}

				if (s2 == true) {

					System.out.println("COORDINATEUR");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='COORDINATEUR REGION'),SYSDATE,'"
							+ region + "')");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='COORDINATEUR REGION'),'"
							+ region
							+ "',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}

				if (s3 == true) {

					System.out
							.println("insert into gss_droit_acces values ('"
									+ acteur
									+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='SALES SUPPORT'),SYSDATE,'','W00')");
					System.out.println("SALES SUPPORT");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='RESPONSABLE CDS'),SYSDATE,(select d.dest_id from  gss_destinataire d where d.dest_nom='"
							+ cds + "'))");
					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='RESPONSABLE CDS'),(select d.dest_id from  gss_destinataire d where d.dest_nom='"
							+ cds
							+ "'),sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}

				if (s4 == true) {

					System.out.println("TRESORIER");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='TRESORIER'),SYSDATE,'W00')");

					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='TRESORIER'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}

				if (stockcontrol == true) {

					System.out.println("stockcontrol");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='STOCK CONTROL'),SYSDATE,'W00')");

					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='STOCK CONTROL'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}

				if (edition == true) {

					System.out.println("edition");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='EDITION DES RAPPORTS'),SYSDATE,'W00')");

					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='EDITION DES RAPPORTS'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}

				if (approbateur == true) {

					System.out.println("approbateur");
					h1 = st2.executeUpdate("insert into gss_droit_acces values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='APPROBATEUR'),SYSDATE,'W00')");

					h2 = st1.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
							+ acteur
							+ "',(select profil_act_id from gss_profil_actor where profil_act_libelle='APPROBATEUR'),'W00',sysdate,'insertion',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
				}
				parametre1Form
						.setHiddenTest("l'utilisater a été ajouté avec succés ");

				con.commit();
				con.close();

			} catch (SQLException ex) {
				ex.printStackTrace();

				con.rollback();
				con.close();
				throw ex;
			} finally {
				// initialiser les champs
				initialisation_champ(form);
			}
		} else {
			parametre1Form.setHiddenTest("l'utilisater éxiste déja");
			trouv = true;

			initialisation_champ(form);

			return mapping.findForward("acteur");
		}

		con.close();

		return mapping.findForward("acteur");
	}

	public ActionForward supprimerprofil(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException,
			ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st = null;
		ResultSet rs = null;
		st = con.createStatement();
		List list = null;

		String acteur = parametre1Form.getLibelle();
		System.out.println("acteur" + acteur);

		/*
		 * String profil = request.getParameter("profil");
		 * System.out.println("profil"+profil);
		 * 
		 * String whs = request.getParameter("whs");
		 * System.out.println("whs"+whs);
		 */

		String profil = parametre1Form.getProfil();
		System.out.println("profil" + profil);

		String whs = parametre1Form.getWhs();
		System.out.println("whs" + whs);

		String acteur_update = (String) request.getSession().getAttribute(
				"username");
		System.out.println(acteur);

		try {
			int h = st
					.executeUpdate("delete from gss_droit_acces t where  t.act_id=(select a.act_id from gss_actor a  where a.act_name='"
							+ acteur
							+ "') and t.profil_act_id='"
							+ profil
							+ "' and t.whs_id='" + whs + "' ");
			int h2 = st
					.executeUpdate("insert into HISTORIQUE_ADMIN values ((select a.act_id from gss_actor a  where a.act_name='"
							+ acteur
							+ "'),'"
							+ profil
							+ "','"
							+ whs
							+ "',sysdate,'suppression',(select act_id from gss_actor a where a.act_name='"
							+ acteur_update + "'))");
			System.out
					.println("hidden test=Le profil sélectionné à été supprimé");
			parametre1Form
					.setHiddenTest("Le profil sélectionné à été supprimé");

			list = parametre1Form.getListprofil_user();

			for (int i = 0; i < list.size(); i++) {

				Profil profill = (Profil) list.get(i);

				System.out.println("profil" + profill.getProfil());
				System.out.println("whs" + profill.getWhs());

				if ((profill.getProfil().equals(profil))
						&& (profill.getWhs().equals(whs))) {
					list.remove(i);
				}
			}

		}

		catch (SQLException ex) {
			System.out.println("erreur lors de la suppression");

			ex.printStackTrace();
			con.rollback();
			con.close();
			throw ex;

		}

		finally {
			initialisation_champ(form);
			con.close();
		}

		return mapping.findForward("acteur");
	}

	public ActionForward afficheracteur(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException, ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st = null, st1, st2, st3, st4 = null;
		ResultSet rs, rs1, rs2, rs3, rs4 = null;
		ArrayList list = new ArrayList();
		st = con.createStatement();

		String nom_user = parametre1Form.getLibelle();
		System.out.println(nom_user);

		System.out.println("je fais appel a la methode rechercher_acteur");

		String code_user = rechercher_acteur(request, nom_user);
		System.out.println("code_user" + code_user);

		if (code_user.equals("user not found")) {
			System.out.println("user n'existe pas");
			parametre1Form.setHiddenTest("Cet utilisateur nexiste pas ");

			// initialiser les champs
			initialisation_champ(form);
			return mapping.findForward("acteur");

		}

		else {

			try {
				System.out
						.println("select p.profil_act_libelle||' '||decode(w.whs_adresse,'AUCUN','',w.whs_adresse)||' '||d.dest_nom,t.profil_act_id,t.whs_id  from gss_actor a ,gss_droit_acces t,gss_profil_actor p,gss_warehouse w,gss_destinataire d  where t.act_id=a.act_id and t.profil_act_id=p.profil_act_id  and w.whs_id(+)=t.whs_id  and substr(t.whs_id,1,3)=d.dest_id(+) and a.act_name='"
								+ nom_user + "' ");
				rs = st.executeQuery("select p.profil_act_libelle||' '||decode(w.whs_adresse,'AUCUN','',w.whs_adresse)||' '||d.dest_nom,t.profil_act_id,t.whs_id  from gss_actor a ,gss_droit_acces t,gss_profil_actor p,gss_warehouse w,gss_destinataire d  where t.act_id=a.act_id and t.profil_act_id=p.profil_act_id  and w.whs_id(+)=t.whs_id  and substr(t.whs_id,1,3)=d.dest_id(+) and a.act_name='"
						+ nom_user + "' ");
				while (rs.next()) {
					Profil profil = new Profil();
					String profil_user = rs.getString(1).trim();
					String prof = rs.getString(2).trim();
					String whs = rs.getString(3).trim();

					profil.setProfil_user(profil_user);
					profil.setProfil(prof);
					profil.setWhs(whs);
					profil.setSupprimer("supprimer le profil");
					list.add(profil);
				}
			}

			catch (SQLException ex) {
				System.out.println(" l'acteur n'exist pas ");

				ex.printStackTrace();

				con.rollback();
				con.close();
				throw ex;

			} finally {
				// initialiser les champs
				initialisation_champ(form);
			}

		}

		con.close();

		System.out.println("la fin de la requete");

		parametre1Form.setListprofil_user(list);

		return mapping.findForward("acteur");
	}

	public ActionForward supprimeracteur(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException,
			ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds supprimer");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1 = null;
		ResultSet rs, rs1 = null;
		String update_active = null;
		List list = new ArrayList();
		int cpt = 0;
		st1 = con.createStatement();

		/*
		 * String code =parametre1Form.getCode(); System.out.println(code);
		 */

		String nom_user = parametre1Form.getLibelle();
		System.out.println(nom_user);

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		System.out.println("je fais appel a la methode rechercher_acteur");

		String code_user = rechercher_acteur(request, nom_user);
		System.out.println("code_user" + code_user);

		if (code_user.equals("user not found")) {
			System.out.println("user n'existe pas");
			parametre1Form.setHiddenTest("Cet utilisateur nexiste pas ");
			// initialiser les champs
			initialisation_champ(form);
			return mapping.findForward("acteur");

		}

		else {

			try {

				st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
						ResultSet.CONCUR_READ_ONLY);
				System.out
						.println("select t.act_id from gss_transaction t where t.act_id=(select a.act_id from gss_actor a where a.act_name='"
								+ nom_user + "' )");
				rs = st.executeQuery("select t.act_id from gss_transaction t where t.act_id=(select a.act_id from gss_actor a where a.act_name='"
						+ nom_user + "' )");
				rs.last();
				cpt = rs.getRow();
				System.out.println("le nombre d'enregistremet=" + cpt);
			}

			catch (SQLException ex) {
				System.out.println("l'acteur n'a pas fait des transactions");
			}

			if (cpt == 0)

			{
				try {

					int h = st1
							.executeUpdate("delete from gss_droit_acces d where d.act_id=(select a.act_id from gss_actor a where a.act_name='"
									+ nom_user + "' )");
					int h1 = st1
							.executeUpdate("delete from gss_droit_acces d where d.act_id=(select a.act_id from gss_actor a where a.act_name='"
									+ nom_user + "' )");
					int h2 = st1
							.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
									+ code_user
									+ "','','',sysdate,'suppression',(select act_id from gss_actor a where a.act_name='"
									+ acteur + "'))");
					parametre1Form.setHiddenTest(nom_user + " a été supprimé ");

				} catch (SQLException ex) {
					System.out.println("y'a un prob ");
					ex.printStackTrace();

					con.rollback();
					con.close();
					throw ex;

				}

				finally {
					// initialiser les champs
					initialisation_champ(form);
					con.close();
				}
			}

			else

			{
				System.out
						.println("Impossible de supprimer ce distributeur car des transactions porte son code");
				parametre1Form.setHiddenTest("Impossible de supprimer"
						+ nom_user + " car des transactions porte son code");

				// initialiser les champs
				initialisation_champ(form);
			}

		}
		parametre1Form.setCode("");
		parametre1Form.setLibelle("");

		return mapping.findForward("acteur");

	}

	public ActionForward activeracteur(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws SQLException, IOException, ServletException {
		Parametre1Form parametre1Form = (Parametre1Form) form;

		System.out.println("je s8 ds activer");

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1 = null;
		ResultSet rs, rs1 = null;
		String update_active = null;
		List list = new ArrayList();
		st = con.createStatement();
		st1 = con.createStatement();

		String nom_user = parametre1Form.getLibelle();
		System.out.println(nom_user);

		String acteur = (String) request.getSession().getAttribute("username");
		System.out.println(acteur);

		System.out.println("je fais appel a la methode rechercher_acteur");

		String code_user = rechercher_acteur(request, nom_user);
		System.out.println("code_user" + code_user);

		if (code_user.equals("user not found")) {
			System.out.println("user n'existe pas");
			parametre1Form.setHiddenTest("Cet utilisateur nexiste pas ");

			// initialiser les champs
			initialisation_champ(form);
			return mapping.findForward("acteur");

		}

		else {

			rs = st.executeQuery("select decode(a.act_status,'I','A','A','I')  from gss_actor a where a.act_name='"
					+ nom_user + "' ");
			while (rs.next()) {
				update_active = rs.getString(1).trim();

			}

			try {
				System.out
						.println("update gss_actor a  set a.act_status ='"
								+ update_active
								+ "' where a.act_id=(select a.act_id from gss_actor a where a.act_name='"
								+ nom_user + "' )");
				int h = st
						.executeUpdate("update gss_actor a  set a.act_status ='"
								+ update_active
								+ "' where a.act_id=(select a.act_id from gss_actor a where a.act_name='"
								+ nom_user + "' )");
				parametre1Form.setHiddenTest(update_active);
				if (update_active.equals("I")) {
					update_active = "desactivation";
				}
				if (update_active.equals("A")) {
					update_active = "activation";
				}

				int h2 = st1
						.executeUpdate("insert into HISTORIQUE_ADMIN values ('"
								+ code_user
								+ "','','',sysdate,'"
								+ update_active
								+ "',(select act_id from gss_actor a where a.act_name='"
								+ acteur + "'))");

			} catch (SQLException ex) {
				System.out.println("y'a un prob ");
				ex.printStackTrace();

				con.rollback();
				con.close();
				throw ex;

			}

			finally {
				// initialiser les champs
				initialisation_champ(form);
			}
		}

		con.close();

		// parametre1Form.setCode("");
		// parametre1Form.setLibelle("");
		parametre1Form.setRegion("");

		return mapping.findForward("acteur");

	}

	public String initialisation_champ(ActionForm form) {

		Parametre1Form parametre1Form = (Parametre1Form) form;

		parametre1Form.setWarehouse("");
		parametre1Form.setRegion("");
		parametre1Form.setCds("");
		parametre1Form.setDistributeur("");
		parametre1Form.setCoordinateur(false);
		parametre1Form.setMagaberaki(false);
		parametre1Form.setSuperviseur_compte(false);
		parametre1Form.setSuperviseur_cds(false);
		parametre1Form.setSuperdist(false);
		parametre1Form.setAdmin(false);
		parametre1Form.setSupereport(false);
		parametre1Form.setSuperpre(false);
		parametre1Form.setSuperpost(false);
		parametre1Form.setCharge(false);
		parametre1Form.setSales(false);
		parametre1Form.setTresor(false);
		parametre1Form.setStockcontrol(false);
		parametre1Form.setSuperviseur_compte(false);
		parametre1Form.setSuperviseur_cds(false);
		parametre1Form.setEdition(false);
		parametre1Form.setApprobateur(false);
		parametre1Form.setAdmincds(false);
		parametre1Form.setAdmindist(false);
		parametre1Form.setAdminsrtdvrs(false);
		parametre1Form.setAdminwrhs(false);
		parametre1Form.setAdminfrns(false);
		parametre1Form.setAdminprtnr(false);
		parametre1Form.setRecepaccwithoi(false);
		parametre1Form.setAdminartcl(false);
		
		

		return null;
	}

	public String rechercher_acteur(HttpServletRequest request,
			String acteur_name) throws SQLException {

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st = null;
		ResultSet rs = null;
		st = con.createStatement();
		boolean trouve = false;
		String code_user = null;

		rs = st.executeQuery("select a.act_id  from gss_actor a where a.act_name='"
				+ acteur_name + "'");

		while (rs.next()) {
			code_user = rs.getString(1).trim();
			System.out.println("code_user");
			System.out.println("user éxiste  ");
			trouve = true;
		}
		if (trouve == false) {
			System.out.println("user n'éxiste pas ");
			code_user = "user not found";
		}

		return code_user;
	}

	public String getResult(String Str) {
		return ((Str != null) ? Str = Str.trim() : Str);
	}

	public String setResult(String Str) {
		return ((Str != null) ? Str : null);
	}
}