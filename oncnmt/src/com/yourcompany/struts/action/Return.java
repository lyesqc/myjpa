
/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.yourcompany.struts.action;

import com.yourcompany.struts.UtilBean.Ordre;
import com.yourcompany.struts.UtilBean.Rang;
import com.yourcompany.struts.UtilBean.Rang3;
import com.yourcompany.struts.UtilClass.Connexion;
import com.yourcompany.struts.form.ReturnForm;

import sun.java2d.pipe.AATextRenderer;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.RedirectingActionForward;
import org.apache.struts.actions.DispatchAction;

/**
 * MyEclipse Struts Creation date: 11-16-2008
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/autosorti" name="returnForm" parameter="hidden"
 *                validate="true"
 */

public class Return extends DispatchAction {

	public ActionForward afficherreserv(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException {
		ReturnForm returnForm = (ReturnForm) form;// TODO Auto-generated method
												// stub

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1, st2, st3, st4 = null;
		ResultSet rs, rs1, rs2, rs3, rs4 = null;
		String res, max = null;
		Integer R1, R2, I2, R;
		ArrayList list = new ArrayList();

		ArrayList list1 = new ArrayList();

		ArrayList listmag = new ArrayList();

		ArrayList listart = new ArrayList();
		ArrayList listprof = new ArrayList();

		ArrayList listdist = new ArrayList();

		st = con.createStatement();
		st1 = con.createStatement();
		st2 = con.createStatement();
		st3 = con.createStatement();
		st4 = con.createStatement();

		/*
		 * String mm= (String)request.getSession().getAttribute("username");
		 * System.out.println(mm); String whh =
		 * (String)request.getSession().getAttribute("werhs");
		 * System.out.println(whh);
		 */

		// rs=st.executeQuery("select distinct
		// gss_article.art_art_libelle,gss_article_profil.profil_libelle,r.rng_start,r.rng_end,r.rng_packaged,r.rng_statut,case
		// when gss_article.art_type_id in ('S1','S2') then
		// decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1',
		// substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' ||
		// substr(r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1
		// as qte from gss_range,gss_article, gss_article_profil,gss_warehouse
		// where (gss_article.art_id=r.art_id) and (gss_article_profil.profil_id
		// (+) =r.profil_id )and (r.rng_packaged='N')and(r.rng_inactif='A')");

		String profil = (String) request.getSession().getAttribute("PROFILAUTOSORTIE");
		System.out.println("PROFILAUTOSORTIE" + profil);
		if (profil.equals("AUTO SORTIE VOUTCHER")) {
			rs1 = st1.executeQuery(
					"select whs_adresse from gss_warehouse where  whs_status='A' and gss_warehouse.whs_id <> 'W00'and gss_warehouse.whs_region='IT'");

		} else

		{

			rs1 = st1.executeQuery(
					"select whs_adresse from gss_warehouse where  whs_status='A' and gss_warehouse.whs_id <> 'W00'");
		}

		rs2 = st2.executeQuery(
				"select dest_nom from gss_destinataire where dest_type not in ('PARTENAIRE','FOURNISSEUR') and gss_destinataire.dest_status='A'");
		rs = st.executeQuery(
				"select art_art_libelle from gss_article,gss_article_type where (gss_article.art_type_id=gss_article_type.art_type_id) and (art_status='A') ");
		rs3 = st3.executeQuery("select profil_libelle from gss_article_profil where profil_statut='A'");

		// packagingForm.setResulrang(list);

		/*
		 * try{ rs4=st4.executeQuery(
		 * "select max(trans_no) from gss_transaction where (trans_type='ASO')"
		 * );
		 * 
		 * 
		 * 
		 * while (rs4.next()){ max=rs4.getString(1).trim();
		 * 
		 * System.out.println(max); }
		 * 
		 * R1=Integer.parseInt(max); R=R1+1; res=Integer.toString(R);
		 * System.out.println(res);
		 * 
		 * }
		 * 
		 * catch (Exception e){ res = "10000"; //System.out.println(
		 * "rs est null"); }
		 */

		/*
		 * String afficher="ASO"+"-"+"W00"+"-"+res;
		 * 
		 * returnForm.setTransaction(afficher);
		 * request.getSession().setAttribute("maxtrans", res);
		 */

		while (rs.next()) {

			String art = rs.getString(1).trim();
			System.out.println(art);
			listart.add(art);

		}

		returnForm.setListarticle(listart);

		while (rs3.next()) {

			String prof = rs3.getString(1).trim();
			System.out.println(prof);
			listprof.add(prof);

		}

		returnForm.setListprof(listprof);

		while (rs1.next()) {

			String mag = rs1.getString(1).trim();
			System.out.println(mag);
			listmag.add(mag);

		}

		System.out.println(listmag);

		returnForm.setListmaga(listmag);

		while (rs2.next()) {

			String part = rs2.getString(1).trim();
			System.out.println(part);

			listdist.add(part);
		}

		System.out.println(listdist);

		returnForm.setListdist(listdist);

		// initialiser la 1ere collection avec des vides

		Rang3 rang3 = new Rang3();

		rang3.setAa("");
		rang3.setProff("");
		rang3.setStt("");
		rang3.setEndd("");
		rang3.setQtt("");
		// rang3.setPq("");
		// rang3.setHlr("");

		list1.add(rang3);

		returnForm.setListajouter(list1);

		// initialiser la 2eme collection avec des vides

		Rang rang = new Rang();

		rang.setArticle("");
		rang.setProfil("");
		rang.setStart("");
		rang.setEnd("");
		rang.setActive("");
		rang.setPackag("");
		rang.setQte("");
		rang.setPq("");
		rang.setHlr("");

		list.add(rang);
		returnForm.setResulrang(list);

		// inialiser les champs avec des vides
		returnForm.setArticle("");
		returnForm.setDistination("");
		returnForm.setDestinataire_visible("");
		returnForm.setDebut("");
		returnForm.setFin("");
		returnForm.setMagasin("");
		returnForm.setNote("");
		returnForm.setCodaprob("");
		returnForm.setProfil("");
		returnForm.setReserv("");
		returnForm.setDis("");
		returnForm.setMag("");

		returnForm.setHiddenTest("");

		con.close();

		return mapping.findForward("autoreserv");
	}

	public ActionForward listaprob(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException, ServletException {
		ReturnForm returnForm = (ReturnForm) form;// TODO Auto-genera

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1 = null;
		ResultSet rs, rs1 = null;
		Integer R, R1;
		String whs = null, whh = null;
		String prio = null;
		String date = null;
		String region = null;
		ArrayList list = new ArrayList();
		ArrayList priv = new ArrayList();

		st = con.createStatement();
		st1 = con.createStatement();

		/*
		 * whh=returnForm.getMagasin(); System.out.println(whh);
		 * 
		 * st1=con.createStatement();
		 * 
		 * rs1=st1.executeQuery(
		 * "select whs_id from gss_warehouse where (gss_warehouse.whs_adresse='"
		 * +whh+"')");
		 * 
		 * if (rs1.next()){
		 * 
		 * whs=rs1.getString(1).trim(); System.out.println(whs);
		 * 
		 * 
		 * } request.getSession().setAttribute("warehousenvoi",whs);
		 * 
		 */
		// String dist= (String)request.getSession().getAttribute("dist");

		String dist = returnForm.getDistination();
		System.out.println("distinatarie" + dist);

		String mag = returnForm.getMagasin();
		System.out.println(mag);

		rs1 = st1.executeQuery("select w.whs_region from gss_warehouse w where w.whs_adresse='" + mag + "'");

		while (rs1.next()) {
			region = rs1.getString(1).trim();
			System.out.println("region=" + region);

		}

		// System.out.println("select distinct
		// v.trans_type,v.whs_id,v.trans_no,nvl(t.trans_ext_ref,'_'),d.dest_nom,v.trans_type||'-'||v.whs_id||'-'||v.trans_no
		// from gss_reserv_approb v ,gss_destinataire d,gss_transaction t where
		// (v.trans_type=t.trans_type and v.whs_id=t.whs_id and t.trans_no
		// =v.trans_no and t.trans_type='RES' and v.whs_id='DIS' AND
		// v.active='A' and V.LIVRE='N' and v.quantite_article-v.qte_auto>0 AND
		// t.approver='P' and v.annuler='N' and d.dest_id(+)=t.dest_id AND
		// d.dest_nom='"+dist+"') union select distinct
		// v.trans_type,v.whs_id,v.trans_no,nvl(t.trans_ext_ref,'_'),d.dest_nom,v.trans_type||'-'||v.whs_id||'-'||v.trans_no
		// from gss_reserv_approb v ,gss_destinataire d,gss_transaction t where
		// (v.active='A' and V.LIVRE='N' and v.quantite_article-v.qte_auto>0 and
		// t.annuler='N' and d.dest_id(+)=t.dest_id and
		// v.trans_type=t.trans_type and v.whs_id=t.whs_id and t.trans_no
		// =v.trans_no and t.trans_type='RES' AND v.whs_id<>'DIS' AND
		// d.dest_nom='"+dist+"')");
		// rs=st.executeQuery("select distinct
		// v.trans_type,v.whs_id,v.trans_no,nvl(t.trans_ext_ref,'_'),d.dest_nom,v.trans_type||'-'||v.whs_id||'-'||v.trans_no
		// from gss_reserv_approb v ,gss_destinataire d,gss_transaction t where
		// (v.trans_type=t.trans_type and v.whs_id=t.whs_id and t.trans_no
		// =v.trans_no and t.trans_type='RES' and t.whs_id='DIS' AND
		// v.active='A' and V.LIVRE='N' and v.quantite_article-v.qte_auto>0 AND
		// t.approver='P' and v.annuler='N' and d.dest_id(+)=t.dest_id AND
		// d.dest_nom='"+dist+"') union select distinct
		// v.trans_type,v.whs_id,v.trans_no,nvl(t.trans_ext_ref,'_'),d.dest_nom,v.trans_type||'-'||v.whs_id||'-'||v.trans_no
		// from gss_reserv_approb v ,gss_destinataire d,gss_transaction t where
		// (v.active='A' and V.LIVRE='N' and v.quantite_article-v.qte_auto>0 and
		// t.annuler='N' and d.dest_id(+)=t.dest_id and
		// v.trans_type=t.trans_type and v.whs_id=t.whs_id and t.trans_no
		// =v.trans_no and t.trans_type='RES' AND v.whs_id<>'DIS' AND
		// d.dest_nom='"+dist+"')");
		System.out.println(
				"select distinct v.trans_type,v.whs_id,v.trans_no,nvl(t.trans_ext_ref,'_'),d.dest_nom,v.trans_type||'-'||v.whs_id||'-'||v.trans_no,to_char(t.trans_date, 'DD/MM/YYYY HH24:MI:SS') from gss_reserv_approb v ,gss_destinataire d,gss_transaction t where (v.trans_type=t.trans_type and v.whs_id=t.whs_id and t.trans_no =v.trans_no and t.trans_type='RES'  AND v.active='A' and V.LIVRE='N' and v.quantite_article-v.qte_auto>0 AND t.approver='P' and v.annuler='N' and d.dest_id(+)=t.dest_id AND d.dest_nom='"
						+ dist + "'  AND v.res_app_whs='" + region + "')");
						// rs=st.executeQuery("select distinct
						// v.trans_type,v.whs_id,v.trans_no,nvl(t.trans_ext_ref,'_'),d.dest_nom,v.trans_type||'-'||v.whs_id||'-'||v.trans_no,to_char(t.trans_date,
						// 'DD/MM/YYYY HH24:MI:SS') from gss_reserv_approb v
						// ,gss_destinataire d,gss_transaction t where
						// (v.trans_type=t.trans_type and v.whs_id=t.whs_id and
						// t.trans_no =v.trans_no and t.trans_type='RES' AND
						// v.active='A' and V.LIVRE='N' and
						// v.quantite_article-v.qte_auto>0 AND t.approver='P'
						// and v.annuler='N' and d.dest_id(+)=t.dest_id AND
						// d.dest_nom='"+dist+"')");

		// select w.whs_region from gss_warehouse w where
		// w.whs_adresse='"+mag+"'

		rs = st.executeQuery(
				"select distinct v.trans_type,v.whs_id,v.trans_no,nvl(t.trans_ext_ref,'_'),d.dest_nom,v.trans_type||'-'||v.whs_id||'-'||v.trans_no,to_char(t.trans_date, 'DD/MM/YYYY HH24:MI:SS') from gss_reserv_approb v ,gss_destinataire d,gss_transaction t where (v.trans_type=t.trans_type and v.whs_id=t.whs_id and t.trans_no =v.trans_no and t.trans_type='RES'  AND v.active='A' and V.LIVRE='N' and v.quantite_article-v.qte_auto>0 AND t.approver='P' and v.annuler='N' and d.dest_id(+)=t.dest_id AND d.dest_nom='"
						+ dist + "'  AND v.res_app_whs='" + region + "')");

		while (rs.next()) {
			Ordre ordre = new Ordre();
			ordre.setOrdre(rs.getString(4).trim());
			ordre.setType(rs.getString(1).trim());
			ordre.setCode(rs.getString(3).trim());
			ordre.setWhs(rs.getString(2).trim());
			ordre.setCodreserv(rs.getString(6).trim());
			ordre.setDistributeur(rs.getString(5).trim());
			ordre.setDist(rs.getString(5).trim());
			ordre.setCmd(rs.getString(4).trim());
			ordre.setDate(rs.getString(7).trim());
			list.add(ordre);

		}

		// returnForm.setMag(mag);

		returnForm.setListeordre(list);

		con.close();

		return mapping.findForward("listaprob");
	}

	public ActionForward ouvriraprob(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException, ServletException {

		ReturnForm returnForm = (ReturnForm) form;

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		ArrayList priv = new ArrayList();
		String max = null;
		String art, prof, maxi;
		Integer R = 0, R1 = 0;
		String prio = null;
		String date = null;
		Statement st, st1, st3, st4 = null;
		ResultSet rs, rs1, rs3, rs4 = null;
		ArrayList listprof = new ArrayList();
		ArrayList listart = new ArrayList();
		String region = null;
		ArrayList listtt = new ArrayList();
		ArrayList list2 = new ArrayList();
		st = con.createStatement();
		st1 = con.createStatement();
		st3 = con.createStatement();
		st4 = con.createStatement();

		/*
		 * String whs=
		 * (String)request.getSession().getAttribute("warehousenvoi");
		 * System.out.println(whs);
		 */

		String codreserv = request.getParameter("codreserv");
		System.out.println("codreserv" + codreserv);

		String code = request.getParameter("code");
		System.out.println("code" + code);
		request.getSession().setAttribute("code", code);

		String type = request.getParameter("type");
		System.out.println("type" + type);
		request.getSession().setAttribute("type", type);
		String whs = request.getParameter("whs");
		System.out.println("code resrevation" + whs);
		request.getSession().setAttribute("whs", whs);
		String dist = request.getParameter("dist");
		System.out.println("distinataire" + dist);

		String cmd = request.getParameter("cmd");
		System.out.println("num de commande" + cmd);

		String magasin = returnForm.getMagasin();
		System.out.println("magasin" + magasin);

		rs1 = st1.executeQuery("select w.whs_region from gss_warehouse w where w.whs_adresse='" + magasin + "'");

		while (rs1.next()) {
			region = rs1.getString(1).trim();
			System.out.println("region=" + region);

		}

		System.out.println(
				"select distinct v.trans_type,v.whs_id,v.trans_no,v.res_app_whs,a.art_art_libelle,nvl(v.profil_id,'_'),v.quantite_article-v.qte_auto,nvl(v.res_app_hlr,'_'),nvl(v.res_app_pq,'_'),t.art_type_libelle,v.qte_auto from gss_reserv_approb v ,gss_destinataire d  ,gss_article a,gss_article_type t where (a.art_id=v.art_id)  and v.trans_no ='"
						+ code + "'  and v.trans_type='" + type + "' and v.whs_id='" + whs
						+ "' and t.art_type_id=a.art_type_id and v.res_app_whs='" + region + "'");
		rs = st.executeQuery(
				"select distinct v.trans_type,v.whs_id,v.trans_no,v.res_app_whs,a.art_art_libelle,nvl(v.profil_id,'_'),v.quantite_article-v.qte_auto,nvl(v.res_app_hlr,'_'),nvl(v.res_app_pq,'_'),t.art_type_libelle,v.qte_auto from gss_reserv_approb v ,gss_destinataire d  ,gss_article a,gss_article_type t where (a.art_id=v.art_id)  and v.trans_no ='"
						+ code + "'  and v.trans_type='" + type + "' and v.whs_id='" + whs
						+ "' and t.art_type_id=a.art_type_id and v.res_app_whs='" + region + "'");

		while (rs.next()) {

			System.out.println(
					"[" + rs.getString(1) + "],[" + rs.getString(2) + "],[" + rs.getString(3) + "],[" + rs.getString(4)
							+ "],[" + rs.getString(5) + "]" + "],[" + rs.getString(7) + "]" + rs.getString(9));

			Rang rang = new Rang();
			if (rs.getString(7).trim().equals("0")) {
			} else {
				rang.setMagasin(rs.getString(4).trim());
				rang.setArticle(rs.getString(5).trim());
				rang.setProfil(rs.getString(6).trim());
				rang.setPq(rs.getString(9).trim());
				rang.setHlr(rs.getString(8).trim());

				// quantit� r�serv�-auto
				rang.setQte(rs.getString(7).trim());
				System.out.println(rs.getString(7).trim());

				rang.setArt(rs.getString(10).trim());
				rang.setQt(Integer.toString(0));// quantit� r�serv�e cette fois

				// les quantilt�es globales Autoris�es
				rang.setQtAuto(Integer.parseInt(rs.getString(11).trim()));

				returnForm.setCodreserv(codreserv);
				returnForm.setDis(dist);
				returnForm.setCodaprob(cmd);

				listtt.add(rang);
			}

		}

		returnForm.setListaprob(listtt);
		// returnForm.setResulrang(list);
		returnForm.setHiddenTest("");

		System.out.println("c'est bon");

		con.close();

		return mapping.findForward("affichaprob");
	}

	public ActionForward cherchreserv(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException, ServletException {

		ReturnForm returnForm = (ReturnForm) form;// TODO Auto-generated method
												// stub

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1, st2, st3, st4 = null;
		ResultSet rs, rs1, rs2, rs3, rs4 = null;
		Integer R, R1;
		String codedist = null, type = null, codmag = null, requette = null;

		String max = null, code = null;
		ArrayList list = new ArrayList();
		ArrayList list1 = new ArrayList();
		ArrayList mm = new ArrayList();
		ArrayList mm1 = new ArrayList();

		ArrayList listmag = new ArrayList();

		ArrayList listdist = new ArrayList();

		st = con.createStatement();
		st1 = con.createStatement();
		st2 = con.createStatement();
		st3 = con.createStatement();
		st4 = con.createStatement();

		String dist = returnForm.getDistination();
		System.out.println(dist);

		String mag = returnForm.getMagasin();
		System.out.println(mag);

		returnForm.setCodaprob(returnForm.getCodreserv());
		rs1 = st1.executeQuery("select dest_id,dest_type from gss_destinataire d  where d.dest_nom='" + dist
				+ "' and dest_type not in ('PARTENAIRE','FOURNISSEUR')");
		while (rs1.next()) {
			codedist = rs1.getString(1).trim();
			System.out.println(codedist);

			type = rs1.getString(2).trim();
			System.out.println(type);
		}

		request.getSession().setAttribute("type_destinataire", type);

		rs2 = st2.executeQuery("select w.whs_id from gss_warehouse w where w.whs_adresse='" + mag + "'");
		while (rs2.next()) {
			codmag = rs2.getString(1).trim();
			System.out.println(codmag);

		}

		rs1 = null;
		rs2 = null;
		st2 = null;
		st1 = null;
		st = con.createStatement();
		st1 = con.createStatement();
		st2 = con.createStatement();

		List listt = returnForm.getListaprob();

		for (int j = 0; j < listt.size(); j++) {
			Rang rang = (Rang) listt.get(j);

			String whs = rang.getMagasin();
			System.out.println(rang.getMagasin());

			String art = rang.getArticle();
			System.out.println(rang.getArticle());

			String prof = rang.getProfil();
			System.out.println(rang.getProfil());

			String pq = rang.getPq();
			System.out.println(rang.getPq());

			String hlr = rang.getHlr();
			System.out.println(rang.getHlr());

			String qte = rang.getQte();
			System.out.println(rang.getQte());

			String qt = rang.getQte();
			System.out.println("quantit�" + rang.getQt());

			System.out.println("type" + rang.getArt());

			if (((rang.getArt()).equals("SCRATCH")) || ((rang.getArt()).equals("E_VOUTCHER"))) {
				requette = "select distinct gss_article.art_art_libelle,nvl(gss_article_profil.profil_libelle,'_'),r.rng_start,r.rng_end,case when gss_article.art_type_id in ('S1','S2')then decode(r.rng_packaged, 'N', 'non package', 'O', 'ORDONNE', 'C', 'EN COUR','P','package') else '_' end PACKAGING,r.rng_statut,case when gss_article.art_type_id in ('S1','S2') then decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' || substr(r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1 as qte,nvl(r.rng_pq,'_'),r.rng_id,r.act_id from gss_range r,gss_article, gss_article_profil,gss_warehouse WHERE (gss_article.art_id=r.art_id) and (gss_article_profil.profil_id (+) =r.profil_id ) and gss_article.art_art_libelle='"
						+ art
						+ "'and r.rng_statut='ACTIVE'  and r.rng_inactif='A' and r.rng_tpd is null and r.rng_sortie <>'O' and  r.rng_sortie <>'S' and r.rng_whs='"
						+ codmag
						+ "' and r.rng_transfert <>'O' and r.rng_transfert <>'C'    and r.rng_whs=gss_warehouse.whs_id and gss_warehouse.whs_region='"
						+ whs + "'";
			}
			// naima
			if ((rang.getArt()).equals("SIMPRE")) {
				// requette="select distinct
				// gss_article.art_art_libelle,nvl(gss_article_profil.profil_libelle,'_'),r.rng_start,r.rng_end,decode(r.rng_packaged,
				// 'N', 'non package', 'O', 'ORDONNE', 'C', 'EN
				// COUR','P','package', '_') PACKAGING,r.rng_statut,case when
				// gss_article.art_type_id in ('S1','S2') then
				// decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4,
				// 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4,
				// 2), '0' || substr(r.rng_start, 5, 1)) else '_' end
				// hlr,r.rng_end-r.rng_start+1 as
				// qte,nvl(r.rng_pq,'_'),r.rng_id,r.act_id from gss_range
				// r,gss_article, gss_article_profil,gss_warehouse WHERE
				// (gss_article.art_id=r.art_id) and
				// (gss_article_profil.profil_id (+) =r.profil_id ) and
				// gss_article.art_art_libelle='"+art+"'and r.rng_tpd is null
				// and r.rng_whs= '"+codmag+"' and r.rng_statut='ACTIVE' and
				// r.rng_packaged='P' and r.rng_inactif='A' and r.rng_pq=
				// '"+pq+"'and r.rng_sortie <>'O' and r.rng_sortie <>'S' and
				// r.rng_transfert <>'O' and r.rng_transfert <>'C' and
				// r.rng_reintegration<>'T' and r.rng_whs=gss_warehouse.whs_id
				// and gss_warehouse.whs_region='"+whs+"' and case when
				// gss_article.art_type_id in ('S1','S2') then
				// decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4,
				// 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4,
				// 2), '0' || substr(r.rng_start, 5, 1)) else '_' end =
				// '"+hlr+"'";

				/*
				 * if ((rang.getProfil()).equals("SWAP")) { requette=
				 * "select distinct gss_article.art_art_libelle,nvl(gss_article_profil.profil_libelle,'_'),r.rng_start,r.rng_end,decode(r.rng_packaged, 'N', 'non package', 'O', 'ORDONNE', 'C', 'EN COUR','P','package', '_') PACKAGING,r.rng_statut,case when gss_article.art_type_id in ('S1','S2') then decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' || substr(r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1 as qte,nvl(r.rng_pq,'_'),r.rng_id,r.act_id from gss_range r,gss_article, gss_article_profil,gss_warehouse WHERE (gss_article.art_id=r.art_id) and (gss_article_profil.profil_id (+) =r.profil_id ) and gss_article.art_art_libelle='"
				 * +art+"'and r.rng_tpd is null and r.rng_whs= '"+codmag+
				 * "' and r.rng_statut='ACTIVE'  and r.rng_inactif='A' and gss_article_profil.profil_libelle= '"
				 * +prof+
				 * "' and r.rng_sortie <>'S'  and r.rng_transfert <>'O' and r.rng_transfert <>'C'   and r.rng_whs=gss_warehouse.whs_id and gss_warehouse.whs_region='"
				 * +whs+"'"; } else
				 * 
				 * {
				 */

				requette = "select distinct gss_article.art_art_libelle,nvl(gss_article_profil.profil_libelle,'_'),r.rng_start,r.rng_end,decode(r.rng_packaged, 'N', 'non package', 'O', 'ORDONNE', 'C', 'EN COUR','P','package', '_') PACKAGING,r.rng_statut,case when gss_article.art_type_id in ('S1','S2') then decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' || substr(r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1 as qte,nvl(r.rng_pq,'_'),r.rng_id,r.act_id from gss_range r,gss_article, gss_article_profil,gss_warehouse WHERE (gss_article.art_id=r.art_id) and (gss_article_profil.profil_id (+) =r.profil_id ) and gss_article.art_art_libelle='"
						+ art + "'and r.rng_tpd is null and r.rng_whs= '" + codmag
						+ "' and ((nvl(gss_article_profil.profil_libelle,'_')='SWAP' and r.rng_statut='ACTIVE') or (nvl(gss_article_profil.profil_libelle,'_')<>'SWAP'  and nvl(gss_article_profil.profil_pre_non_active,'_')<>'N' and r.rng_packaged='P' and r.rng_statut='ACTIVE')or (nvl(gss_article_profil.profil_libelle,'_')<>'SWAP'  and gss_article_profil.profil_pre_non_active='N' and r.rng_packaged='P') ) and r.rng_inactif='A'  and nvl(gss_article_profil.profil_libelle,'_')= '"
						+ prof
						+ "'  and r.rng_sortie <>'S' and r.rng_sortie <>'O' and r.rng_transfert <>'O' and r.rng_transfert <>'O' and r.rng_transfert <>'C'   and r.rng_whs=gss_warehouse.whs_id and gss_warehouse.whs_region='"
						+ whs + "' ";

			}

			if ((rang.getArt()).equals("SIMPOST")) {
				if ((rang.getProfil()).equals("DJEZZY CLASSIC") || (rang.getProfil()).equals("DJEZZY CONTROL")) {
					requette = "select distinct gss_article.art_art_libelle,nvl(gss_article_profil.profil_libelle,'_'),r.rng_start,r.rng_end,decode(r.rng_packaged, 'N', 'non package', 'O', 'ORDONNE', 'C', 'EN COUR','P','package', '_') PACKAGING,r.rng_statut,case when gss_article.art_type_id in ('S1','S2') then decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' || substr(r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1 as qte,nvl(r.rng_pq,'_'),r.rng_id,r.act_id from gss_range r,gss_article, gss_article_profil,gss_warehouse WHERE (gss_article.art_id=r.art_id) and (gss_article_profil.profil_id (+) =r.profil_id ) and gss_article.art_art_libelle='"
							+ art + "'and r.rng_tpd is null and r.rng_whs= '" + codmag
							+ "' and r.rng_statut='ACTIVE'  and r.rng_packaged='P' and r.rng_inactif='A' and gss_article_profil.profil_libelle= '"
							+ prof
							+ "'and r.rng_sortie <>'S' and r.rng_sortie <>'O'  and r.rng_transfert <>'O' and r.rng_transfert <>'C'  and r.rng_dist='"
							+ dist + "'  and r.rng_whs=gss_warehouse.whs_id and gss_warehouse.whs_region='" + whs + "'";
				} else {
					/*
					 * if ((rang.getProfil()).equals("SWAP")) { requette=
					 * "select distinct gss_article.art_art_libelle,nvl(gss_article_profil.profil_libelle,'_'),r.rng_start,r.rng_end,decode(r.rng_packaged, 'N', 'non package', 'O', 'ORDONNE', 'C', 'EN COUR','P','package', '_') PACKAGING,r.rng_statut,case when gss_article.art_type_id in ('S1','S2') then decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' || substr(r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1 as qte,nvl(r.rng_pq,'_'),r.rng_id,r.act_id from gss_range r,gss_article, gss_article_profil,gss_warehouse WHERE (gss_article.art_id=r.art_id) and (gss_article_profil.profil_id (+) =r.profil_id ) and gss_article.art_art_libelle='"
					 * +art+"'and r.rng_tpd is null and r.rng_whs= '"+codmag+
					 * "' and r.rng_statut='ACTIVE'  and r.rng_inactif='A' and gss_article_profil.profil_libelle= '"
					 * +prof+
					 * "' and r.rng_sortie <>'S'  and r.rng_transfert <>'O' and r.rng_transfert <>'C'   and r.rng_whs=gss_warehouse.whs_id and gss_warehouse.whs_region='"
					 * +whs+"'"; }
					 * 
					 * else{
					 */

					requette = "select distinct gss_article.art_art_libelle,nvl(gss_article_profil.profil_libelle,'_'),r.rng_start,r.rng_end,decode(r.rng_packaged, 'N', 'non package', 'O', 'ORDONNE', 'C', 'EN COUR','P','package', '_') PACKAGING,r.rng_statut,case when gss_article.art_type_id in ('S1','S2') then decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' || substr(r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1 as qte,nvl(r.rng_pq,'_'),r.rng_id,r.act_id from gss_range r,gss_article, gss_article_profil,gss_warehouse WHERE (gss_article.art_id=r.art_id) and (gss_article_profil.profil_id (+) =r.profil_id ) and gss_article.art_art_libelle='"
							+ art + "'and r.rng_tpd is null and r.rng_whs= '" + codmag
							+ "' and ((nvl(gss_article_profil.profil_libelle,'_')='SWAP' and r.rng_statut='ACTIVE') or (nvl(gss_article_profil.profil_libelle,'_')<>'SWAP'  and nvl(gss_article_profil.profil_pre_non_active,'_')<>'N' and r.rng_packaged='P' and r.rng_statut='ACTIVE')or (nvl(gss_article_profil.profil_libelle,'_')<>'SWAP'  and gss_article_profil.profil_pre_non_active='N' and r.rng_packaged='P') ) and r.rng_inactif='A'  and nvl(gss_article_profil.profil_libelle,'_')= '"
							+ prof
							+ "'  and r.rng_sortie <>'S'  and r.rng_sortie <>'O' and r.rng_transfert <>'O' and r.rng_transfert <>'C'   and r.rng_whs=gss_warehouse.whs_id and gss_warehouse.whs_region='"
							+ whs + "'";

				}
			}

			System.out.println(requette);

			rs = st.executeQuery(requette);

			while (rs.next()) {

				System.out.println("[" + rs.getString(1) + "],[" + rs.getString(2) + "],[" + rs.getString(3) + "],["
						+ rs.getString(4) + "],[" + rs.getString(5) + "],[" + rs.getString(6) + "],[" + rs.getString(7)
						+ "],[" + rs.getString(8) + "]");
				Rang rang1 = new Rang();

				rang1.setArticle(rs.getString(1).trim());
				rang1.setProfil(rs.getString(2).trim());

				rang1.setStart(rs.getString(3).trim());

				rang1.setEnd(rs.getString(4).trim());
				rang1.setActive(rs.getString(6).trim());
				rang1.setPackag(rs.getString(5).trim());
				rang1.setQte(rs.getString(8).trim());
				rang1.setHlr(rs.getString(7).trim());
				// rang.setSwap(rs.getString(7).trim());
				rang1.setPq(rs.getString(9).trim());
				rang1.setRng_id(rs.getString(10).trim());
				rang1.setAct_id(rs.getString(11).trim());

				rang1.setArt(rs.getString(1).trim());
				rang1.setProf(rs.getString(2).trim());
				rang1.setSt(rs.getString(3).trim());
				rang1.setNd(rs.getString(4).trim());
				rang1.setQt(rs.getString(8).trim());

				list.add(rang1);
			}

			returnForm.setResulrang(list);

		}

		/*
		 * requette =
		 * "select distinct a.art_art_libelle,nvl(p.profil_libelle,'_'),r.rng_start,r.rng_end,decode(r.rng_packaged, 'N', 'non package','O', 'ORDONNE', 'C', 'EN COUR','P','package', '_') PACKAGING,r.rng_statut,nvl(r.rng_swap,'_'),case when a.art_type_id in ('S1','S2') then decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' || substr (r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1 as qte,nvl(r.rng_pq,'_') from gss_range r,gss_article a, gss_article_profil p,gss_warehouse where (a.art_id=r.art_id) and (p.profil_id (+) =r.profil_id ) and a.art_art_libelle='SIM POSTPAID DJEZZY' and p.profil_libelle not in ('DJEZZY CONTROL','DJEZZY CLASSIC')and r.rng_inactif='A' and r.rng_statut='ACTIVE' AND r.rng_packaged='P'and r.rng_tpd is null and r.rng_sortie not in('O','S') and r.rng_whs= '"
		 * +codmag+"' and r.rng_transfert not in ('O','C')"+ " union "+
		 * "select distinct gss_article.art_art_libelle,nvl(gss_article_profil.profil_libelle,'_'),r.rng_start,r.rng_end,decode(r.rng_packaged, 'N', 'non package', 'O', 'ORDONNE', 'C', 'EN COUR','P','package', '_') PACKAGING,r.rng_statut,nvl(r.rng_swap,'_'),case when gss_article.art_type_id in ('S1','S2') then decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' || substr(r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1 as qte,nvl(r.rng_pq,'_') from gss_range r,gss_article, gss_article_profil,gss_warehouse WHERE (gss_article.art_id=r.art_id) and (gss_article_profil.profil_id (+) =r.profil_id ) and gss_article.art_art_libelle in ('SIM PREPAID DJEZZY','SIM PREPAID ALLO')and r.rng_tpd is null and r.rng_sortie not in('O','S') and r.rng_whs= '"
		 * +codmag+
		 * "' and r.rng_statut='ACTIVE'  and r.rng_packaged='P' and r.rng_inactif='A' and r.rng_transfert not in ('O','C')"
		 * + " union "+
		 * "select distinct gss_article.art_art_libelle,nvl(gss_article_profil.profil_libelle,'_'),r.rng_start,r.rng_end,decode(r.rng_packaged, 'N', 'non package', 'O', 'ORDONNE', 'C', 'EN COUR','P','package', '_') PACKAGING,r.rng_statut,nvl(r.rng_swap,'_'),case when gss_article.art_type_id in ('S1','S2') then decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' || substr(r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1 as qte,nvl(r.rng_pq,'_') from gss_range r,gss_article, gss_article_profil,gss_warehouse,gss_article_type WHERE (gss_article.art_id=r.art_id) and (gss_article_profil.profil_id (+) =r.profil_id ) and gss_article.art_type_id=gss_article_type.art_type_id and gss_article_type.art_type_libelle='SCRATCH' and r.rng_statut='CHARGE'  and r.rng_inactif='A' and r.rng_tpd is null and r.rng_sortie not in('O','S') and r.rng_whs='"
		 * +codmag+"' and r.rng_transfert not in ('O','C')";
		 * 
		 * 
		 * System.out.println(requette);
		 * 
		 * if (type.equals("CDS")||type.equals("CORPORATE")||type.equals(
		 * "DISTRIBUTEUR")) { requette = requette +
		 * " union select distinct gss_article.art_art_libelle,nvl(gss_article_profil.profil_libelle,'_'),r.rng_start,r.rng_end,decode(r.rng_packaged, 'N', 'non package', 'O', 'ORDONNE', 'C', 'EN COUR','P','package', '_') PACKAGING,r.rng_statut,nvl(r.rng_swap,'_'),case when gss_article.art_type_id in ('S1','S2') then decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' || substr(r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1 as qte,nvl(r.rng_pq,'_') from gss_range r,gss_article, gss_article_profil,gss_warehouse,gss_article_type t WHERE (gss_article.art_id=r.art_id) and (gss_article_profil.profil_id (+) =r.profil_id ) and gss_article.art_type_id=t.art_type_id and gss_article.art_art_libelle= 'SIM POSTPAID DJEZZY' and gss_article_profil.profil_libelle in ('DJEZZY CONTROL','DJEZZY CLASSIC')and r.rng_inactif='A' and r.rng_statut='ACTIVE' AND r.rng_packaged='P'and r.rng_dist='"
		 * +dist+
		 * "' and r.rng_tpd is null and r.rng_sortie not in('O','S') and r.rng_whs= '"
		 * +codmag+"' and r.rng_transfert not in ('O','C')"; }
		 * 
		 * System.out.println(requette);
		 * 
		 * rs=st.executeQuery(requette);
		 * 
		 * 
		 * 
		 * 
		 * while (rs.next()) {
		 * 
		 * System.out.println("["+rs.getString(1)+"],["+rs.getString(2)+"],["+rs
		 * .getString(3)+"],["+rs.getString(4)+"],["+rs.getString(5)+"],["+rs.
		 * getString(6)+"],["+rs.getString(7)+"],["+rs.getString(8)+"]"); Rang
		 * rang=new Rang();
		 * 
		 * rang.setArticle(rs.getString(1).trim());
		 * rang.setProfil(rs.getString(2).trim());
		 * 
		 * rang.setStart(rs.getString(3).trim());
		 * 
		 * rang.setEnd(rs.getString(4).trim());
		 * rang.setActive(rs.getString(6).trim());
		 * rang.setPackag(rs.getString(5).trim());
		 * rang.setQte(rs.getString(9).trim());
		 * rang.setHlr(rs.getString(8).trim()); //
		 * rang.setSwap(rs.getString(7).trim());
		 * rang.setPq(rs.getString(10).trim());
		 * 
		 * rang.setArt(rs.getString(1).trim());
		 * rang.setProf(rs.getString(2).trim());
		 * rang.setSt(rs.getString(3).trim());
		 * rang.setNd(rs.getString(4).trim());
		 * rang.setQt(rs.getString(9).trim());
		 * 
		 * 
		 * 
		 * 
		 * 
		 * list.add(rang); }
		 * 
		 * 
		 * 
		 * if (type.equals("CDS")) {
		 * 
		 * st=null; rs=null; st=con.createStatement(); rs=st.executeQuery(
		 * "select distinct gss_article.art_art_libelle,nvl(gss_article_profil.profil_libelle,'_'),r.rng_start,r.rng_end,decode(r.rng_packaged, 'N', 'non package','O', 'ORDONNE', 'C', 'EN COUR','P','package', '_') PACKAGING,nvl(r.rng_statut,'_'),nvl(r.rng_swap,'_'),case when gss_article.art_type_id in ('S1','S2') then decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' || substr(r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1 as qte,nvl(r.rng_pq,'_') from gss_range r,gss_article, gss_article_profil,gss_warehouse,gss_article_type WHERE (gss_article.art_id=r.art_id) and (gss_article_profil.profil_id (+) =r.profil_id ) and r.rng_swap='SWAP'  and r.rng_inactif='A' and r.rng_tpd is null and r.rng_sortie not in ('O','S') and r.rng_whs= '"
		 * +codmag+"' and r.rng_transfert not in ('O','C')");
		 * 
		 * while (rs.next()) {
		 * 
		 * System.out.println("["+rs.getString(1)+"],["+rs.getString(2)+"],["+rs
		 * .getString(3)+"],["+rs.getString(4)+"],["+rs.getString(5)+"],["+rs.
		 * getString(6)+"],["+rs.getString(7)+"],["+rs.getString(8)+"]"); Rang
		 * rang=new Rang();
		 * 
		 * rang.setArticle(rs.getString(1).trim());
		 * rang.setProfil(rs.getString(7).trim());
		 * 
		 * rang.setStart(rs.getString(3).trim());
		 * 
		 * rang.setEnd(rs.getString(4).trim());
		 * rang.setActive(rs.getString(6).trim());
		 * rang.setPackag(rs.getString(5).trim());
		 * rang.setQte(rs.getString(9).trim());
		 * rang.setHlr(rs.getString(8).trim()); //
		 * rang.setSwap(rs.getString(7).trim());
		 * rang.setPq(rs.getString(10).trim());
		 * 
		 * 
		 * rang.setArt(rs.getString(1).trim());
		 * rang.setProf(rs.getString(7).trim());
		 * rang.setSt(rs.getString(3).trim());
		 * rang.setNd(rs.getString(4).trim());
		 * rang.setQt(rs.getString(9).trim());
		 * 
		 * 
		 * 
		 * 
		 * 
		 * list.add(rang);
		 * 
		 * 
		 * } }
		 * 
		 * returnForm.setResulrang(list);
		 */

		returnForm.setHiddenTest("");

		con.close();

		return mapping.findForward("autoreserv");
	}

	public ActionForward ajouterreserv(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException, ServletException {
		ReturnForm returnForm = (ReturnForm) form;

		String nn = request.getParameter("art");
		String nn1 = request.getParameter("prof");
		String nn2 = request.getParameter("st");
		String nn3 = request.getParameter("nd");
		String nn4 = request.getParameter("qt");
		String nn5 = request.getParameter("hlr");
		String nn6 = request.getParameter("pq");
		String rng_id = request.getParameter("rng_id");
		String act_id = request.getParameter("act_id");
		System.out.println(rng_id);
		System.out.println(act_id);

		System.out.println(nn);
		System.out.println(nn1);
		System.out.println(nn2);
		System.out.println(nn3);
		System.out.println(nn4);
		System.out.println(nn5);
		System.out.println(nn6);

		returnForm.setDebut(nn2);
		returnForm.setFin(nn3);
		returnForm.setArticle(nn);
		returnForm.setProfil(nn1);
		returnForm.setPq(nn6);
		returnForm.setHlr(nn5);
		returnForm.setAct_id(act_id);
		returnForm.setRng_id(rng_id);

		returnForm.setHiddenTest("");

		return mapping.findForward("autoreserv");
	}

	public ActionForward ajouter2(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException, ServletException {
		ReturnForm returnForm = (ReturnForm) form;// TODO autoreserv-genera

		String art, prof, nd, nf, qute, trouv, hlr, pr, pq = null;
		Long ndl, nfl, qte;

		List list = null;
		List listGrand = null;
		Statement st, st1 = null;
		ResultSet rs, rs2 = null;
		Boolean trouver = false, existe = false, existe2 = false;
		String nn1_grand = null;
		String act_id2 = null, rng_id2 = null;
		Boolean condition;
		// Connexion connexion=new Connexion();
		// Connection con=connexion.createConnection(request);

		//snoc change
		
		int snocQte = 0;
		System.out.println("We are at AutoSortie : "+returnForm.getOrder());
		
		//end snoc change
		
		ArrayList nouv = new ArrayList();

		Rang3 rang2 = new Rang3();

		String type = (String) request.getSession().getAttribute("type_destinataire");
		System.out.println("type CDS ou distributeur" + type);

		list = returnForm.getListajouter();
		listGrand = returnForm.getResulrang();

		art = returnForm.getArticle();
		System.out.println(art);
		prof = returnForm.getProfil();
		System.out.println(prof);

		if (prof.equals("")) {
			prof = "_";

			System.out.println("profil null");
		}
		nd = returnForm.getDebut();
		System.out.println(nd);
		nf = returnForm.getFin();
		System.out.println(nf);
		hlr = returnForm.getHlr();
		System.out.println(hlr);
		pq = returnForm.getPq();
		System.out.println("pq" + pq);
		String rng_id = returnForm.getRng_id();
		String act_id = returnForm.getAct_id();
		System.out.println(rng_id);
		System.out.println(act_id);

		ndl = Long.parseLong(nd);
		nfl = Long.parseLong(nf);
		qte = nfl - ndl + 1;
		qute = Long.toString(qte);
		System.out.println("la quantit� choisie mnt=" + qute);

		List listt = returnForm.getListaprob();

		for (int j = 0; j < listt.size(); j++) {
			Rang rang = (Rang) listt.get(j);

			System.out.println(rang.getMagasin());

			String artt = rang.getArticle();
			System.out.println(rang.getArticle());

			String proff = rang.getProfil();
			System.out.println(rang.getProfil());

			String pqq = rang.getPq();
			System.out.println(rang.getPq());

			String hlrr = rang.getHlr();
			System.out.println(rang.getHlr());

			String qtee = rang.getQte();
			System.out.println(rang.getQte());

			String qtt = rang.getQt();
			System.out.println("quantit� d�ja r�serv�e " + rang.getQt());
			if (rang.getArt().equals("SIMPOST")) {
				if (artt.equals(art) && proff.equals(prof)) {

					if (Integer.parseInt(qtee) < (Integer.parseInt(qtt) + Integer.parseInt(qute))) {
						returnForm.setHiddenTest("quantitesup");
						System.out.println("quantite sup");

						return mapping.findForward("autoreserv");

					}

					else {
						System.out.println("quantite inf");
						// rang.setQt(Integer.toString(Integer.parseInt(qtt)+Integer.parseInt(qute)));
						// listt.add(j, rang);
						// listt.set(j, rang);
					}
					break;
				}

			} else {
				// if (artt.equals(art)&& proff.equals(prof)&&pqq.equals(pq)&&
				// hlrr.equals(hlr))

				/*
				 * if (type.equals("CDS")) { condition= (artt.equals(art)&&
				 * proff.equals(prof)); } else { condition= (artt.equals(art)&&
				 * proff.equals(prof)&&pqq.equals(pq)); }
				 */
				if (artt.equals(art) && proff.equals(prof)) {

					if (Integer.parseInt(qtee) < (Integer.parseInt(qtt) + Integer.parseInt(qute))) {
						returnForm.setHiddenTest("quantitesup");
						System.out.println("quantite sup");

						return mapping.findForward("autoreserv");

					}

					else {
						System.out.println("quantite inf");

						// rang.setQt(Integer.toString(Integer.parseInt(qtt)+Integer.parseInt(qute)));
						// listt.add(j, rang);
						// listt.set(j, rang);
					}
					break;
				}
			}
		}

		nn1_grand = prof;
		if (prof.equals("")) {
			nn1_grand = "_";
			System.out.println(nn1_grand);
			System.out.println("profil null");
		}

		if (qte <= 0) {
			returnForm.setHiddenTest("fin inferieur debut");
			System.out.println("le fin est< debut");

			returnForm.setArticle("");
			returnForm.setProfil("");
			returnForm.setDebut("");
			returnForm.setFin("");

			return mapping.findForward("autoreserv");
		}

		int size = list.size();
		System.out.println(size);

		if (size == 0) {

			System.out.println("la collection est vide");

			for (int j = 0; j < listGrand.size(); j++) {
				Rang list3 = (Rang) listGrand.get(j);

				/*
				 * boolean tmp = ( Long.parseLong(list3.getEnd())>=ndl &&
				 * Long.parseLong(list3.getEnd())<=nfl ) ; System.out.println(
				 * "la bool = "+Boolean.toString(tmp));
				 */
				if ((ndl >= Long.parseLong(list3.getStart()) && nfl <= Long.parseLong(list3.getEnd())
						&& art.equals(list3.getArticle()) && nn1_grand.equals(list3.getProfil()))) {

					/// ndl <= parseLong(list3.getStart()) <= nfl
					trouver = true;
					existe = true;
					act_id2 = list3.getAct_id();
					rng_id2 = list3.getRng_id();
					System.out.println("act_id2" + act_id2);
					System.out.println("rng_id2" + rng_id2);
					break;

				} /// end if teste coll grande

			} //// end for coll grande

			if (existe.equals(false)) {
				returnForm.setHiddenTest("range n'est pas dans la coll grande");
				System.out.println("range n'existe pas dans la collection grande");

				returnForm.setArticle("");
				returnForm.setProfil("");
				returnForm.setDebut("");
				returnForm.setFin("");

				return mapping.findForward("autoreserv");
			}

			else {

				// calculer la quantit�

				qte = nfl - ndl + 1;
				qute = Long.toString(qte);
				System.out.println(qute);

				// remplir la collection
				rang2.setAa(art);
				rang2.setProff(prof);
				rang2.setSt(nd);
				rang2.setStt(nd);
				rang2.setEndd(nf);
				rang2.setSee(nf);
				rang2.setQt(qute);
				rang2.setAaa(art);
				rang2.setPpp(prof);
				rang2.setQtt(qute);
				rang2.setPq(pq);
				rang2.setHlr(hlr);

				/*
				 * rang2.setAct_id(act_id); rang2.setRng_id(rng_id);
				 */
				rang2.setAct_id(act_id2);
				rang2.setRng_id(rng_id2);

				list.add(rang2);

				/*
				 * for (int j=0;j<listt.size();j++){ Rang rang =(Rang)
				 * listt.get(j);
				 * 
				 * System.out.println(rang.getMagasin());
				 * 
				 * String artt=rang.getArticle();
				 * System.out.println(rang.getArticle());
				 * 
				 * String proff=rang.getProfil(); System.out.println(
				 * rang.getProfil());
				 * 
				 * String pqq=rang.getPq();
				 * System.out.println("rang.getPq()"+rang.getPq());
				 * 
				 * String hlrr=rang.getHlr(); System.out.println(rang.getHlr());
				 * 
				 * String qtee=rang.getQte(); System.out.println(rang.getQte());
				 * 
				 * String qtt=rang.getQt(); System.out.println(
				 * "quantit� d�ja r�serv�e "+rang.getQt());
				 * 
				 * 
				 * if (artt.equals(art)&& proff.equals(prof)) {
				 * System.out.println(
				 * "je vais mettre � jour la quantit� r�serv�");
				 * System.out.println("nouvelle qte"
				 * +Integer.toString(Integer.parseInt(qtt)+Integer.parseInt(qute
				 * )));
				 * rang.setQt(Integer.toString(Integer.parseInt(qtt)+Integer.
				 * parseInt(qute))); // listt.add(j, rang); listt.set(j, rang);
				 * break; }
				 * 
				 * }
				 */

				for (int j = 0; j < list.size(); j++) {
					System.out.println("dans le for");
					System.out.println("j =" + j);

					Rang3 list3 = (Rang3) list.get(j);

					if ((list3.getAa().equals(""))) {
						System.out.println("dans le if");
					} else {
						nouv.add(list3);
						System.out.println("dans le else");

					}

				}

				trouver = true;
				returnForm.setListajouter(nouv);
				returnForm.setHiddenTest("");
				// break;

			} // end if ""

		}

		// else de size

		else {

			for (int i = 0; i < list.size(); i++) {
				Rang3 list2 = (Rang3) list.get(i);

				if (list2.getAa().equals("")) {

					System.out.println("la 1ere ligne vide");

					for (int j = 0; j < listGrand.size(); j++) {
						Rang list3 = (Rang) listGrand.get(j);

						/// (('"+R1+"'>=RNG_START) and ('"+R2+"'<=RNG_END)) or
						//// (RNG_START between '"+R1+"' and '"+R2+"' ) or
						/// (RNG_END between '"+R1+"' and '"+R2+"' )

						/*
						 * boolean tmp = ( Long.parseLong(list3.getEnd())>=ndl
						 * && Long.parseLong(list3.getEnd())<=nfl ) ;
						 * System.out.println("la bool = "
						 * +Boolean.toString(tmp));
						 */
						if ((ndl >= Long.parseLong(list3.getStart()) && nfl <= Long.parseLong(list3.getEnd())
								&& art.equals(list3.getArticle()) && nn1_grand.equals(list3.getProfil()))) {

							/// ndl <= parseLong(list3.getStart()) <= nfl
							trouver = true;
							existe = true;
							act_id2 = list3.getAct_id();
							rng_id2 = list3.getRng_id();
							System.out.println("act_id2" + act_id2);
							System.out.println("rng_id2" + rng_id2);
							break;

						} /// end if teste coll grande

					} //// end for coll grande

					if (existe.equals(false)) {
						returnForm.setHiddenTest("range n'est pas dans la coll grande");
						System.out.println("range n'existe pas dans la collection grande");

						returnForm.setArticle("");
						returnForm.setProfil("");
						returnForm.setDebut("");
						returnForm.setFin("");

						return mapping.findForward("autoreserv");
					}

					else {

						// calculer la quantit�

						qte = nfl - ndl + 1;
						qute = Long.toString(qte);
						System.out.println(qute);

						// remplir la collection
						rang2.setAa(art);
						rang2.setProff(prof);
						rang2.setSt(nd);
						rang2.setStt(nd);
						rang2.setEndd(nf);
						rang2.setSee(nf);
						rang2.setQt(qute);
						rang2.setAaa(art);
						rang2.setPpp(prof);
						rang2.setQtt(qute);
						rang2.setPq(pq);
						/*
						 * rang2.setAct_id(act_id); rang2.setRng_id(rng_id);
						 */
						rang2.setAct_id(act_id2);
						rang2.setRng_id(rng_id2);

						rang2.setHlr(hlr);

						list.add(rang2);

						/*
						 * for (int j=0;j<listt.size();j++){ Rang rang =(Rang)
						 * listt.get(j);
						 * 
						 * System.out.println(rang.getMagasin());
						 * 
						 * String artt=rang.getArticle();
						 * System.out.println(rang.getArticle());
						 * 
						 * String proff=rang.getProfil(); System.out.println(
						 * rang.getProfil());
						 * 
						 * String pqq=rang.getPq();
						 * System.out.println("rang.getPq()"+rang.getPq());
						 * 
						 * String hlrr=rang.getHlr();
						 * System.out.println(rang.getHlr());
						 * 
						 * String qtee=rang.getQte();
						 * System.out.println(rang.getQte());
						 * 
						 * String qtt=rang.getQt(); System.out.println(
						 * "quantit� d�ja r�serv�e "+rang.getQt());
						 * 
						 * 
						 * if (artt.equals(art)&& proff.equals(prof)) {
						 * System.out.println(
						 * "je vais mettre � jour la quantit� r�serv�");
						 * System.out.println("nouvelle qte"
						 * +Integer.toString(Integer.parseInt(qtt)+Integer.
						 * parseInt(qute)));
						 * 
						 * rang.setQt(Integer.toString(Integer.parseInt(qtt)+
						 * Integer.parseInt(qute))); // listt.add(j, rang);
						 * listt.set(j, rang); break; }
						 * 
						 * }
						 */

						for (int j = 0; j < list.size(); j++) {
							System.out.println("dans le for");
							System.out.println("j =" + j);

							Rang3 list3 = (Rang3) list.get(j);

							if ((list3.getAa().equals(""))) {
								System.out.println("dans le if");
							} else {
								nouv.add(list3);
								System.out.println("dans le else");

							}

						}

						trouver = true;
						returnForm.setListajouter(nouv);
						returnForm.setHiddenTest("");
						break;

					} // end if ""
				} // ende else existe

				///// si la collection est non vide

				else {

					System.out.println("la 1ere ligne non vide");

					returnForm.setHiddenTest("");

					if ((Long.parseLong(nd) >= Long.parseLong(list2.getSt()))
							&& (Long.parseLong(nf) <= (Long.parseLong(list2.getSee()))) && art.equals(list2.getAa())
							&& prof.equals(list2.getProff())
							|| (Long.parseLong(list2.getSt()) >= Long.parseLong(nd)
									&& Long.parseLong(list2.getSt()) <= Long.parseLong(nf)) && art.equals(list2.getAa())
									&& prof.equals(list2.getProff())
							|| (Long.parseLong(list2.getSee()) >= Long.parseLong(nd)
									&& Long.parseLong(list2.getSee()) <= Long.parseLong(nf))
									&& art.equals(list2.getAa()) && prof.equals(list2.getProff())

					) {
						returnForm.setHiddenTest("range dans la coll");
						System.out.println("range existe dans la collection");
						trouver = true;
						existe2 = true;
						existe = true;

						break;
					} //// end if collection

				} //// end for

				if (existe2.equals(false)) {
					//// n'existe pas dans la petite coll

					for (int j = 0; j < listGrand.size(); j++) {
						Rang list3 = (Rang) listGrand.get(j);

						/// (('"+R1+"'>=RNG_START) and ('"+R2+"'<=RNG_END)) or
						//// (RNG_START between '"+R1+"' and '"+R2+"' ) or
						/// (RNG_END between '"+R1+"' and '"+R2+"' )

						if ((ndl >= Long.parseLong(list3.getStart()) && nfl <= Long.parseLong(list3.getEnd())
								&& art.equals(list3.getArticle()) && nn1_grand.equals(list3.getProfil()))

						)

						{
							// trouver=true;
							existe = true;
							act_id2 = list3.getAct_id();
							rng_id2 = list3.getRng_id();
							System.out.println("act_id2" + act_id2);
							System.out.println("rng_id2" + rng_id2);
							break;

						} /// end if teste coll grande

					} //// end for coll grande
				} // end if existe2

			} /// end else " "

		}

		if (existe.equals(false)) {
			returnForm.setHiddenTest("range n'est pas dans la coll grande");
			System.out.println("range n'existe pas dans la collection grande");

			returnForm.setArticle("");
			returnForm.setProfil("");
			returnForm.setDebut("");
			returnForm.setFin("");

			return mapping.findForward("autoreserv");
		}

		if (trouver.equals(false)) {
			returnForm.setHiddenTest("");

			System.out.println("rang n'existe pas dans la collection ");

			// calculer la quantit�
			qte = nfl - ndl + 1;
			qute = Long.toString(qte);
			System.out.println(qute);

			// remplir la collection
			rang2.setAa(art);
			rang2.setProff(prof);
			rang2.setSt(nd);
			rang2.setStt(nd);
			rang2.setEndd(nf);
			rang2.setSee(nf);
			rang2.setQt(qute);
			rang2.setAaa(art);
			rang2.setPpp(prof);
			rang2.setQtt(qute);
			rang2.setPq(pq);
			rang2.setHlr(hlr);
			/*
			 * rang2.setAct_id(act_id); rang2.setRng_id(rng_id);
			 */
			rang2.setAct_id(act_id2);
			rang2.setRng_id(rng_id2);

			list.add(rang2);

			/*
			 * for (int j=0;j<listt.size();j++){ Rang rang =(Rang) listt.get(j);
			 * 
			 * System.out.println(rang.getMagasin());
			 * 
			 * String artt=rang.getArticle();
			 * System.out.println(rang.getArticle());
			 * 
			 * String proff=rang.getProfil(); System.out.println(
			 * rang.getProfil());
			 * 
			 * String pqq=rang.getPq();
			 * System.out.println("rang.getPq()"+rang.getPq());
			 * 
			 * String hlrr=rang.getHlr(); System.out.println(rang.getHlr());
			 * 
			 * String qtee=rang.getQte(); System.out.println(rang.getQte());
			 * 
			 * String qtt=rang.getQt(); System.out.println(
			 * "quantit� d�ja r�serv�e "+rang.getQt());
			 * 
			 * 
			 * if (artt.equals(art)&& proff.equals(prof)) { System.out.println(
			 * "je vais mettre � jour la quantit� r�serv�"); System.out.println(
			 * "nouvelle qte"
			 * +Integer.toString(Integer.parseInt(qtt)+Integer.parseInt(qute)));
			 * rang.setQt(Integer.toString(Integer.parseInt(qtt)+Integer.
			 * parseInt(qute))); // listt.add(j, rang); listt.set(j, rang);
			 * break; }
			 * 
			 * }
			 */

			returnForm.setListajouter(list);

		}

		returnForm.setArticle("");
		returnForm.setProfil("");
		returnForm.setDebut("");
		returnForm.setFin("");

		return mapping.findForward("autoreserv");
	}

	public ActionForward Retirer2(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException {
		ReturnForm returnForm = (ReturnForm) form;
		List list = null;
		ArrayList nouv = new ArrayList();

		String type = (String) request.getSession().getAttribute("type_destinataire");
		System.out.println("type CDS ou distributeur" + type);

		list = returnForm.getListajouter();
		String art = request.getParameter("aaa");
		System.out.println("arti" + art);
		String prof = request.getParameter("ppp");
		System.out.println("prof" + prof);
		String ser_str = request.getParameter("st");
		System.out.println("serial_str" + ser_str);
		String ser_end = request.getParameter("see");
		System.out.println("serial_end" + ser_end);
		String quante = request.getParameter("qt");
		System.out.println("qte" + quante);

		String hlr = request.getParameter("hlr");
		System.out.println("hlr" + hlr);

		String pq = request.getParameter("pq");
		System.out.println("pq" + pq);

		System.out.println("colle" + list.size());
		for (int i = 0; i < list.size(); i++) {

			Rang3 list2 = (Rang3) list.get(i);
			System.out.println("dans le for");

			Rang3 pre = new Rang3();

			System.out.println(i);
			System.out.println("soum" + list2.getAa());

			if ((list2.getAa().equals(art)) && (list2.getProff().equals(prof)) && (list2.getEndd().equals(ser_end))
					&& (list2.getStt().equals(ser_str))) {
				System.out.println("dans le if");
			} else {
				nouv.add(list2);
				System.out.println("dans le else");
			}

		}

		returnForm.setListajouter(nouv);

		List listt = returnForm.getListaprob();

		/*
		 * for (int j=0;j<listt.size();j++){ Rang rang =(Rang) listt.get(j);
		 * System.out.println(rang.getArt());
		 * System.out.println(rang.getMagasin());
		 * 
		 * String artt=rang.getArticle(); System.out.println(rang.getArticle());
		 * 
		 * String proff=rang.getProfil(); System.out.println( rang.getProfil());
		 * 
		 * String pqq=rang.getPq(); System.out.println(rang.getPq());
		 * 
		 * String hlrr=rang.getHlr(); System.out.println(rang.getHlr());
		 * 
		 * String qtt=rang.getQt(); System.out.println("qte d�ja r�serv�"
		 * +rang.getQt());
		 * 
		 * if (rang.getArt().equals("SIMPOST")) { if (artt.equals(art)&&
		 * proff.equals(prof)) { System.out.println("�gale simpost");
		 * 
		 * System.out.println("je vais diminuer la quantit�");
		 * System.out.println("qte d�ja r�serv�="+
		 * Integer.toString(Integer.parseInt(qtt))); System.out.println(
		 * "qte � diminuer="+ Integer.parseInt(quante)); System.out.println(
		 * "qte r�serv� restante="+
		 * Integer.toString(Integer.parseInt(qtt)-Integer.parseInt(quante)));
		 * 
		 * rang.setQt(Integer.toString(Integer.parseInt(qtt)-Integer.parseInt(
		 * quante))); listt.add(j, rang); break; } } else{ Boolean condition; if
		 * (artt.equals(art)&& proff.equals(prof)) { System.out.println(
		 * "�gale autre"); System.out.println("je vais diminuer la quantit�");
		 * System.out.println("qte d�ja r�serv�="+
		 * Integer.toString(Integer.parseInt(qtt))); System.out.println(
		 * "qte � diminuer="+ Integer.parseInt(quante)); System.out.println(
		 * "qte r�serv� restante="
		 * +Integer.toString(Integer.parseInt(qtt)-Integer.parseInt(quante)));
		 * rang.setQt(Integer.toString(Integer.parseInt(qtt)-Integer.parseInt(
		 * quante))); listt.add(j, rang); break; } }
		 * 
		 * }
		 */

		returnForm.setHiddenTest("");
		return mapping.findForward("autoreserv");
	}

	public ActionForward valider2(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException, ServletException, ParseException {
		ReturnForm returnForm = (ReturnForm) form;

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		String idpart = null, idact = null, idart, idprof, maxrng = null, res1 = null, res2, start, end, tra, wh, no,
				whp, pfp, arp = null, rp, acp, pq, statu, swap, promo, prior, p, t, s, r, sta2 = null, end2,
				res3 = null;
		Statement st, st1, st2, st3, st4, st5, st6, st7, st8, st9, st10, st11, st12, st14, st15 = null;
		ResultSet rs, rs1, rs2, rs3, rs4, rs5, rs6, rs8, rs14, rs15 = null;
		int h, h1, h2, h3, h4, h5, h6, h7, h8;
		Integer I2;
		Number P = 0;
		long R2 = 0, R3 = 0, I = 0, Res2 = 0, I1 = 0;
		List listt;
		String whh = null, codedist = null, whsregion = null;
		ArrayList priv = new ArrayList();

		st = con.createStatement();
		st1 = con.createStatement();
		st2 = con.createStatement();
		st3 = con.createStatement();
		st4 = con.createStatement();
		st5 = con.createStatement();
		st6 = con.createStatement();
		st7 = con.createStatement();
		st8 = con.createStatement();
		st9 = con.createStatement();
		st10 = con.createStatement();
		st11 = con.createStatement();
		st12 = con.createStatement();
		String max = null;

		String type = (String) request.getSession().getAttribute("type_destinataire");
		System.out.println("type CDS ou distributeur" + type);

		try {
			rs6 = st6.executeQuery("select max(trans_no) from gss_transaction where (trans_type='TSO')");
			while (rs6.next()) {
				max = rs6.getString(1).trim();
			}
			int res = Integer.parseInt(max);
			res = res + 1;
			max = Integer.toString(res);
			System.out.println("le max :" + max);
		}

		catch (Exception e) {
			max = "10000";
			// System.out.println("rs est null");
		}

		rs6 = null;
		st6 = null;
		st6 = con.createStatement();
		String mm = (String) request.getSession().getAttribute("username");
		System.out.println(mm);

		/*
		 * String whh = (String)request.getSession().getAttribute("werhs");
		 * System.out.println(whh);
		 */

		String mag = returnForm.getMagasin();
		System.out.println(mag);

		String distcombo = returnForm.getDistination();
		System.out.println(distcombo);

		/*
		 * String mag=returnForm.getMag(); System.out.println(mag);
		 * 
		 * String dist=returnForm.getDis(); System.out.println(dist);
		 */

		String note = returnForm.getNote();
		System.out.println(note);

		String code = returnForm.getCodaprob();
		System.out.println(code);

		String txt = code.substring(0, 3);
		System.out.println("txt=" + txt);
		String txt1 = code.substring(4, 7);
		System.out.println("txt1=" + txt1);
		String txt2 = code.substring(8);
		System.out.println("txt2=" + txt2);

		con.setAutoCommit(false);

		rs1 = st1.executeQuery("select dest_id from gss_destinataire where dest_nom='" + distcombo
				+ "' and dest_type<>'FOURNISSEUR' and dest_type<>'PARTENAIRE' ");

		// rs2=st2.executeQuery("select whs_id from gss_warehouse where
		// gss_warehouse.whs_adresse='"+origin+"'");

		rs3 = st3.executeQuery("select ACT_ID from gss_actor where act_name='" + mm + "'");

		while (rs1.next()) {

			codedist = rs1.getString(1).trim();
			System.out.println(codedist);
		}

		/*
		 * while (rs2.next()) {
		 * 
		 * String whs = rs2.getString(1).trim(); System.out.println(whs); }
		 */

		while (rs3.next()) {

			idact = rs3.getString(1).trim();
			System.out.println(idact);
		}

		rs3 = st3.executeQuery("select w.whs_region from gss_warehouse w where w.whs_adresse='" + mag + "'");

		while (rs3.next()) {

			whsregion = rs3.getString(1).trim();
			System.out.println(whsregion);
		}

		/*
		 * try{ rs4=st4.executeQuery(
		 * "select max(rng_id) from gss_range where ACT_ID='"+idact+"'");
		 * 
		 * if (rs4.next()){ maxrng=rs4.getString(1).trim();
		 * System.out.println(maxrng);
		 * 
		 * R2=Long.parseLong(maxrng); R2=R2+1; res1=Long.toString(R2);
		 * System.out.println(res1);
		 * 
		 * }
		 * 
		 * 
		 * }
		 * 
		 * 
		 * catch (Exception e) {
		 * 
		 * res1 = "1000000000";
		 * 
		 * }
		 */

		listt = returnForm.getListajouter();

		int size = listt.size();
		System.out.println(size);

		if (size == 0) {
			System.out.println("la collection est vide");

			returnForm.setHiddenTest("collection null");

			return mapping.findForward("autoreserv");

		} else

		{

			try {
				System.out.println("insert into  gss_transaction values('" + max + "','TSO','W00',SYSDATE,'" + idact
						+ "','" + codedist + "',decode('" + code + "','null',null,'" + code + "'),'" + note
						+ "','','','','','N')");
				h = st.executeUpdate("insert into  gss_transaction values('" + max + "','TSO','W00',SYSDATE,'" + idact
						+ "','" + codedist + "',decode('" + code + "','null',null,'" + code + "'),'" + note
						+ "','','','','','N')");

				for (int i = 0; i < listt.size(); i++) {
					System.out.println(i);
					Rang3 rn = (Rang3) listt.get(i);
					System.out.println("aa=" + rn.getAa());
					System.out.println("pp=" + rn.getProff());

					String qte = rn.getQtt();
					int int_qte = Integer.parseInt(qte);

					System.out.println("st=" + rn.getStt());
					System.out.println("se=" + rn.getEndd());
					System.out.println("qt=" + rn.getQtt());

					String art = rn.getAa();
					System.out.println(art);

					if (art.equals("")) {
						System.out.println("la collection est vide");

						returnForm.setHiddenTest("collection null");

						return mapping.findForward("autoreserv");

					}

					try {
						rs4 = st4.executeQuery("select max(rng_id) from gss_range where ACT_ID='" + idact + "'");

						if (rs4.next()) {
							maxrng = rs4.getString(1).trim();
							System.out.println(maxrng);

							R2 = Long.parseLong(maxrng);
							R2 = R2 + 1;
							res1 = Long.toString(R2);
							System.out.println(res1);

						}

					}

					catch (Exception e) {

						res1 = "1000000000";

					}

					String prof = rn.getProff();
					System.out.println(prof);
					String sta = rn.getStt();
					System.out.println(sta);
					String ind = rn.getEndd();
					System.out.println(ind);
					String rng_id = rn.getRng_id();
					String act_id = rn.getAct_id();
					System.out.println(rng_id);
					System.out.println(act_id);

					// rs2=st2.executeQuery("select distinct
					// rng_start,rng_end,rng_id,act_id,profil_id,art_id,rng_pq,rng_statut,rng_swap,trans_type,r.whs_id,trans_no,rng_promotion,rng_priorite,rng_packaged,rng_transfert,rng_sortie,rng_reintegration,rng_whs,rng_dist,rng_packaging_whs,rng_sortie_whs,rng_reintegration_whs,rng_transfert_whs
					// from gss_range,gss_warehouse where (rng_inactif ='A') and
					// r.rng_tpd is null and r.rng_whs=gss_warehouse.whs_id and
					// gss_warehouse.whs_adresse='"+mag+"' and r.rng_statut=
					// 'CHARGE' and r.rng_sortie='N' or (rng_inactif ='A' and
					// r.rng_tpd is null and r.rng_whs=gss_warehouse.whs_id and
					// gss_warehouse.whs_adresse='"+mag+"' and
					// r.rng_swap='SWAP'and r.rng_sortie='N') or (rng_inactif
					// ='A' and r.rng_tpd is null and
					// r.rng_whs=gss_warehouse.whs_id and
					// gss_warehouse.whs_adresse='"+mag+"' and
					// r.rng_packaged='P' and r.rng_statut='ACTIVE' and
					// r.rng_sortie='N')");
					System.out.println(
							"select distinct rng_start,rng_end,rng_id,act_id,profil_id,art_id,rng_pq,rng_statut,rng_tdp,trans_type,r.whs_id,trans_no,rng_promotion,rng_priorite,rng_packaged,rng_transfert,rng_sortie,rng_reintegration,rng_whs,rng_dist,rng_packaging_whs,rng_sortie_whs,rng_reintegration_whs,rng_transfert_whs from gss_range,gss_warehouse  where r.rng_id='"
									+ rng_id + "' and r.act_id='" + act_id + "'");
					// rs2=st2.executeQuery("select distinct
					// rng_start,rng_end,rng_id,act_id,profil_id,art_id,rng_pq,rng_statut,rng_tpd,trans_type,gss_range.whs_id,trans_no,rng_promotion,rng_priorite,rng_packaged,rng_transfert,rng_sortie,rng_reintegration,rng_whs,rng_dist,rng_packaging_whs,rng_sortie_whs,rng_reintegration_whs,rng_transfert_whs
					// from gss_range,gss_warehouse where
					// gss_range.rng_id='"+rng_id+"' and
					// gss_range.act_id='"+act_id+"'");
					rs2 = st2.executeQuery(
							"select distinct rng_start,rng_end,rng_id,act_id,profil_id,art_id,rng_pq,rng_statut,rng_tpd,trans_type,gss_range.whs_id,trans_no,rng_promotion,rng_priorite,rng_packaged,rng_transfert,rng_sortie,rng_reintegration,rng_whs,rng_dist,rng_packaging_whs,rng_sortie_whs,rng_reintegration_whs,rng_transfert_whs from gss_range,gss_warehouse  where rng_start<='"
									+ sta + "'  and rng_end>='" + ind + "' and rng_inactif='A' ");

					while (rs2.next()) {
						System.out.println("dans le while");

						start = rs2.getString(1).trim();
						System.out.println("1" + start);

						end = rs2.getString(2).trim();
						System.out.println("2" + end);

						rp = rs2.getString(3).trim();
						System.out.println("3" + rp);

						acp = rs2.getString(4).trim();
						System.out.println("4" + acp);

						pfp = getResult(rs2.getString(5));
						System.out.println("5" + pfp);

						arp = rs2.getString(6).trim();
						System.out.println("6" + arp);

						pq = getResult(rs2.getString(7));
						System.out.println("7" + pq);

						statu = rs2.getString(8).trim();
						System.out.println("8" + statu);

						swap = getResult(rs2.getString(9));
						System.out.println("9" + swap);

						/*
						 * tra = rs2.getString(10).trim();
						 * 
						 * wh=rs2.getString(11).trim();
						 * no=rs2.getString(12).trim();
						 */

						promo = getResult(rs2.getString(13));
						System.out.println(promo);

						prior = getResult(rs2.getString(14));
						System.out.println(prior);

						p = rs2.getString(15).trim();
						t = rs2.getString(16).trim();
						s = rs2.getString(17).trim();
						r = rs2.getString(18).trim();

						whp = rs2.getString(19).trim();

						String dist = getResult(rs2.getString(20));
						System.out.println("20" + dist);

						String whspack = getResult(rs2.getString(21));
						System.out.println("21" + whspack);

						String whssor = getResult(rs2.getString(22));
						System.out.println("22" + whssor);

						String whsrentegr = getResult(rs2.getString(23));
						System.out.println("23" + whsrentegr);

						String whstransfert = getResult(rs2.getString(24));
						System.out.println("24" + whstransfert);

						/***************
						 * rang entier
						 *******************************/

						if ((sta.equals(start)) && (ind.equals(end))) {
							System.out.println("dans le 1er if");

							h2 = st7.executeUpdate("insert into gss_range values ('" + res1 + "','" + idact
									+ "',decode('" + pfp + "','null',null,'" + pfp + "'),'" + arp + "','" + sta + "','"
									+ ind + "','" + rp + "','" + acp + "','A',SYSDATE,'',decode('" + pq
									+ "','null',null,'" + pq + "'),'" + statu + "','TSO','W00','" + max
									+ "','','',decode('" + promo + "','null',null,'" + promo + "'),decode('" + prior
									+ "','null',null,'" + prior + "'),'" + p + "','" + t + "','O','" + r + "','" + whp
									+ "',decode('" + dist + "','null',null,'" + dist + "'),decode('" + whspack
									+ "','null',null,'" + whspack + "'),'" + codedist + "',decode('" + whsrentegr
									+ "','null',null,'" + whsrentegr + "'),decode('" + whstransfert + "','null',null,'"
									+ whstransfert + "'))");

							h3 = st9.executeUpdate("insert into gss_transaction_range values ('TSO','W00','" + max
									+ "','" + res1 + "','" + idact + "',SYSDATE)");

							h3 = st9.executeUpdate(
									"insert into gss_transaction_range select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"
											+ res1 + " ,'" + idact
											+ "'code ,t_r_date from gss_transaction_range where t_r_rng_id='" + rp
											+ "' and t_r_rng_act_id ='" + acp + "'");

							// h8 = st12.executeUpdate("UPDATE gss_range SET
							// rng_inactif = 'I',rng_inactif_date=sysdate WHERE
							// (rng_id='"+rp+"')and (act_id='"+acp+"')");
							h8 = st12.executeUpdate(
									"UPDATE gss_range SET rng_inactif = 'I',rng_inactif_date=sysdate WHERE (rng_id='"
											+ rp + "')and (act_id='" + acp + "') and rng_inactif='A' ");

							if (h8 == 0) {
								System.out.println("le rang est inactif");
								returnForm.setHiddenTest("rang deja touche");
								con.rollback();
								return mapping.findForward("autoreserv");

							}

							break;
						}

						else {
							System.out.println("dans le else1");
						}

						/********** le 1er rang ********************/

						/*
						 * Res1=Long.parseLong(sta); Res2=Long.parseLong(ind);
						 */

						if ((sta.equals(start)) && (Long.parseLong(ind) < Long.parseLong(end))) {
							System.out.println("dans le 2eme if");

							I = Long.parseLong(ind);
							I = I + 1;
							sta2 = Long.toString(I);

							h2 = st7.executeUpdate("insert into gss_range values ('" + res1 + "','" + idact
									+ "',decode('" + pfp + "','null',null,'" + pfp + "'),'" + arp + "','" + sta + "','"
									+ ind + "','" + rp + "','" + acp + "','A',SYSDATE,'',decode('" + pq
									+ "','null',null,'" + pq + "'),'" + statu + "','TSO','W00','" + max
									+ "','','',decode('" + promo + "','null',null,'" + promo + "'),decode('" + prior
									+ "','null',null,'" + prior + "'),'" + p + "','" + t + "','O','" + r + "','" + whp
									+ "',decode('" + dist + "','null',null,'" + dist + "'),decode('" + whspack
									+ "','null',null,'" + whspack + "'),'" + codedist + "',decode('" + whsrentegr
									+ "','null',null,'" + whsrentegr + "'),decode('" + whstransfert + "','null',null,'"
									+ whstransfert + "'))");

							h3 = st9.executeUpdate("insert into gss_transaction_range values ('TSO','W00','" + max
									+ "','" + res1 + "','" + idact + "',SYSDATE)");

							R3 = Long.parseLong(res1);
							R3 = R3 + 1;
							res2 = Long.toString(R3);
							System.out.println(res2);

							h4 = st10.executeUpdate("insert into gss_range values ('" + res2 + "','" + idact
									+ "',decode('" + pfp + "','null',null,'" + pfp + "'),'" + arp + "','" + sta2 + "','"
									+ end + "','" + rp + "','" + acp + "','A',SYSDATE,'',decode('" + pq
									+ "','null',null,'" + pq + "'),'" + statu + "','','','','','',decode('" + promo
									+ "','null',null,'" + promo + "'),decode('" + prior + "','null',null,'" + prior
									+ "'),'" + p + "','" + t + "','" + s + "','" + r + "','" + whp + "',decode('" + dist
									+ "','null',null,'" + dist + "'),decode('" + whspack + "','null',null,'" + whspack
									+ "'),decode('" + whssor + "','null',null,'" + whssor + "'),decode('" + whsrentegr
									+ "','null',null,'" + whsrentegr + "'),decode('" + whstransfert + "','null',null,'"
									+ whstransfert + "'))");

							h3 = st9.executeUpdate(
									"insert into gss_transaction_range select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"
											+ res1 + " ,'" + idact
											+ "'code ,t_r_date from gss_transaction_range where t_r_rng_id='" + rp
											+ "' and t_r_rng_act_id ='" + acp + "'");

							h1 = st11.executeUpdate(
									"insert into gss_transaction_range select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"
											+ res2 + " ,'" + idact
											+ "'code ,t_r_date from gss_transaction_range where t_r_rng_id='" + rp
											+ "' and t_r_rng_act_id ='" + acp + "'");

							// h8 = st12.executeUpdate("UPDATE gss_range SET
							// rng_inactif = 'I',rng_inactif_date=sysdate WHERE
							// (rng_id='"+rp+"')and (act_id='"+acp+"')");
							h8 = st12.executeUpdate(
									"UPDATE gss_range SET rng_inactif = 'I',rng_inactif_date=sysdate WHERE (rng_id='"
											+ rp + "')and (act_id='" + acp + "') and rng_inactif='A' ");

							if (h8 == 0) {
								System.out.println("le rang est inactif");
								returnForm.setHiddenTest("rang deja touche");
								con.rollback();
								return mapping.findForward("autoreserv");

							}
							break;
						} else {
							System.out.println("dans le else2");
						}

						/***************** 2er partie ***************/

						if ((Long.parseLong(sta) > Long.parseLong(start)) && (ind.equals(end)))

						{
							System.out.println("dans le 3eme if");

							h2 = st7.executeUpdate("insert into gss_range values ('" + res1 + "','" + idact
									+ "',decode('" + pfp + "','null',null,'" + pfp + "'),'" + arp + "','" + sta + "','"
									+ ind + "','" + rp + "','" + acp + "','A',SYSDATE,'',decode('" + pq
									+ "','null',null,'" + pq + "'),'" + statu + "','TSO','W00','" + max
									+ "','','',decode('" + promo + "','null',null,'" + promo + "'),decode('" + prior
									+ "','null',null,'" + prior + "'),'" + p + "','" + t + "','O','" + r + "','" + whp
									+ "',decode('" + dist + "','null',null,'" + dist + "'),decode('" + whspack
									+ "','null',null,'" + whspack + "'),'" + codedist + "',decode('" + whsrentegr
									+ "','null',null,'" + whsrentegr + "'),decode('" + whstransfert + "','null',null,'"
									+ whstransfert + "'))");

							h3 = st9.executeUpdate("insert into gss_transaction_range values ('TSO','W00','" + max
									+ "','" + res1 + "','" + idact + "',SYSDATE)");

							I = Long.parseLong(sta);
							I = I - 1;
							end2 = Long.toString(I);

							R3 = Long.parseLong(res1);
							R3 = R3 + 1;
							res2 = Long.toString(R3);
							System.out.println(res2);

							h4 = st10.executeUpdate("insert into gss_range values ('" + res2 + "','" + idact
									+ "',decode('" + pfp + "','null',null,'" + pfp + "'),'" + arp + "','" + start
									+ "','" + end2 + "','" + rp + "','" + acp + "','A',SYSDATE,'',decode('" + pq
									+ "','null',null,'" + pq + "'),'" + statu + "','','','','','',decode('" + promo
									+ "','null',null,'" + promo + "'),decode('" + prior + "','null',null,'" + prior
									+ "'),'" + p + "','" + t + "','" + s + "','" + r + "','" + whp + "',decode('" + dist
									+ "','null',null,'" + dist + "'),decode('" + whspack + "','null',null,'" + whspack
									+ "'),decode('" + whssor + "','null',null,'" + whssor + "'),decode('" + whsrentegr
									+ "','null',null,'" + whsrentegr + "'),decode('" + whstransfert + "','null',null,'"
									+ whstransfert + "'))");

							h3 = st9.executeUpdate(
									"insert into gss_transaction_range select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"
											+ res1 + " ,'" + idact
											+ "'code ,t_r_date from gss_transaction_range where t_r_rng_id='" + rp
											+ "' and t_r_rng_act_id ='" + acp + "'");

							h1 = st11.executeUpdate(
									"insert into gss_transaction_range select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"
											+ res2 + " ,'" + idact
											+ "'code ,t_r_date from gss_transaction_range where t_r_rng_id='" + rp
											+ "' and t_r_rng_act_id ='" + acp + "'");

							// h8 = st12.executeUpdate("UPDATE gss_range SET
							// rng_inactif = 'I',rng_inactif_date=sysdate WHERE
							// (rng_id='"+rp+"')and (act_id='"+acp+"')");
							h8 = st12.executeUpdate(
									"UPDATE gss_range SET rng_inactif = 'I',rng_inactif_date=sysdate WHERE (rng_id='"
											+ rp + "')and (act_id='" + acp + "') and rng_inactif='A' ");

							if (h8 == 0) {
								System.out.println("le rang est inactif");
								returnForm.setHiddenTest("rang deja touche");
								con.rollback();
								return mapping.findForward("autoreserv");

							}

							break;
						} else {
							System.out.println("dans le else3");
						}

						rs6 = null;
						st6 = null;
						st6 = con.createStatement();

						/* 3 parties */
						if ((Long.parseLong(sta) > Long.parseLong(start))
								&& (Long.parseLong(ind) < Long.parseLong(end)))

						{
							System.out.println("dans le 4eme if");

							System.out.println("insert into gss_range values ('" + res1 + "','" + idact + "',decode('"
									+ pfp + "','null',null,'" + pfp + "'),'" + arp + "','" + sta + "','" + ind + "','"
									+ rp + "','" + acp + "','A',SYSDATE,'',decode('" + pq + "','null',null,'" + pq
									+ "'),'" + statu + "','ASO','W00','" + max + "','','',decode('" + promo
									+ "','null',null,'" + promo + "'),decode('" + prior + "','null',null,'" + prior
									+ "'),'" + p + "','" + t + "','O','" + r + ",'" + whp + "',decode('" + dist
									+ "','null',null,'" + dist + "'),decode('" + whspack + "','null',null,'" + whspack
									+ "'),'" + codedist + "',decode('" + whsrentegr + "','null',null,'" + whsrentegr
									+ "'),decode('" + whstransfert + "','null',null,'" + whstransfert + "'))");
							h2 = st7.executeUpdate("insert into gss_range values ('" + res1 + "','" + idact
									+ "',decode('" + pfp + "','null',null,'" + pfp + "'),'" + arp + "','" + sta + "','"
									+ ind + "','" + rp + "','" + acp + "','A',SYSDATE,'',decode('" + pq
									+ "','null',null,'" + pq + "'),'" + statu + "','TSO','W00','" + max
									+ "','','',decode('" + promo + "','null',null,'" + promo + "'),decode('" + prior
									+ "','null',null,'" + prior + "'),'" + p + "','" + t + "','O','" + r + "','" + whp
									+ "',decode('" + dist + "','null',null,'" + dist + "'),decode('" + whspack
									+ "','null',null,'" + whspack + "'),'" + codedist + "',decode('" + whsrentegr
									+ "','null',null,'" + whsrentegr + "'),decode('" + whstransfert + "','null',null,'"
									+ whstransfert + "'))");

							h3 = st9.executeUpdate("insert into gss_transaction_range values ('TSO','W00','" + max
									+ "','" + res1 + "','" + idact + "',SYSDATE)");

							I = Long.parseLong(sta);
							I = I - 1;
							end2 = Long.toString(I);

							I1 = Long.parseLong(ind);
							I1 = I1 + 1;
							sta2 = Long.toString(I1);

							R3 = Long.parseLong(res1);
							R3 = R3 + 1;
							res2 = Long.toString(R3);
							System.out.println(res2);

							h4 = st10.executeUpdate("insert into gss_range values ('" + res2 + "','" + idact
									+ "',decode('" + pfp + "','null',null,'" + pfp + "'),'" + arp + "','" + start
									+ "','" + end2 + "','" + rp + "','" + acp + "','A',SYSDATE,'',decode('" + pq
									+ "','null',null,'" + pq + "'),'" + statu + "','','','','','',decode('" + promo
									+ "','null',null,'" + promo + "'),decode('" + prior + "','null',null,'" + prior
									+ "'),'" + p + "','" + t + "','" + s + "','" + r + "','" + whp + "',decode('" + dist
									+ "','null',null,'" + dist + "'),decode('" + whspack + "','null',null,'" + whspack
									+ "'),decode('" + whssor + "','null',null,'" + whssor + "'),decode('" + whsrentegr
									+ "','null',null,'" + whsrentegr + "'),decode('" + whstransfert + "','null',null,'"
									+ whstransfert + "'))");

							R3 = R3 + 1;
							res3 = Long.toString(R3);
							System.out.println(res3);

							h5 = st7.executeUpdate("insert into gss_range values ('" + res3 + "','" + idact
									+ "',decode('" + pfp + "','null',null,'" + pfp + "'),'" + arp + "','" + sta2 + "','"
									+ end + "','" + rp + "','" + acp + "','A',SYSDATE,'',decode('" + pq
									+ "','null',null,'" + pq + "'),'" + statu + "','','','','','',decode('" + promo
									+ "','null',null,'" + promo + "'),decode('" + prior + "','null',null,'" + prior
									+ "'),'" + p + "','" + t + "','" + s + "','" + r + "','" + whp + "',decode('" + dist
									+ "','null',null,'" + dist + "'),decode('" + whspack + "','null',null,'" + whspack
									+ "'),decode('" + whssor + "','null',null,'" + whssor + "'),decode('" + whsrentegr
									+ "','null',null,'" + whsrentegr + "'),decode('" + whstransfert + "','null',null,'"
									+ whstransfert + "'))");

							h3 = st9.executeUpdate(
									"insert into gss_transaction_range select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"
											+ res1 + " ,'" + idact
											+ "'code ,t_r_date from gss_transaction_range where t_r_rng_id='" + rp
											+ "' and t_r_rng_act_id ='" + acp + "'");

							h1 = st11.executeUpdate(
									"insert into gss_transaction_range select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"
											+ res2 + " ,'" + idact
											+ "'code ,t_r_date from gss_transaction_range where t_r_rng_id='" + rp
											+ "' and t_r_rng_act_id ='" + acp + "'");
							System.out.println(
									"insert into gss_transaction_range select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"
											+ res3 + " ,'" + idact
											+ "'code ,t_r_date from gss_transaction_range where t_r_rng_id='" + rp
											+ "' and t_r_rng_act_id ='" + acp + "'");
							h7 = st6.executeUpdate(
									"insert into gss_transaction_range select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"
											+ res3 + " ,'" + idact
											+ "'code ,t_r_date from gss_transaction_range where t_r_rng_id='" + rp
											+ "' and t_r_rng_act_id ='" + acp + "'");

							// h8 = st12.executeUpdate("UPDATE gss_range SET
							// rng_inactif = 'I',rng_inactif_date=sysdate WHERE
							// (rng_id='"+rp+"')and (act_id='"+acp+"')");
							h8 = st12.executeUpdate(
									"UPDATE gss_range SET rng_inactif = 'I',rng_inactif_date=sysdate WHERE (rng_id='"
											+ rp + "')and (act_id='" + acp + "') and rng_inactif='A' ");

							if (h8 == 0) {
								System.out.println("le rang est inactif");
								returnForm.setHiddenTest("rang deja touche");
								con.rollback();
								return mapping.findForward("autoreserv");

							}
							break;

						} else {
							System.out.println("dans le 4 else");
						}

					}

					String requeteupdate = "UPDATE gss_reserv_approb v SET v.qte_auto=v.qte_auto+'" + int_qte
							+ "' WHERE v.res_app_whs='" + whsregion + "'  and v.trans_type='" + txt + "' and v.whs_id='"
							+ txt1 + "' and v.trans_no='" + txt2 + "' and v.art_id='" + arp + "' and  v.profil_id= '"
							+ prof + "' ";
					String sql = "insert into log_insert values ('" + max + "','TSO','W00',?)";
					PreparedStatement preparedStatement = con.prepareStatement(sql);
					preparedStatement.setString(1, requeteupdate);
					preparedStatement.executeUpdate();

					h8 = st12.executeUpdate("UPDATE gss_reserv_approb v SET v.qte_auto=v.qte_auto+'" + int_qte
							+ "' WHERE v.res_app_whs='" + whsregion + "'  and v.trans_type='" + txt + "' and v.whs_id='"
							+ txt1 + "' and v.trans_no='" + txt2 + "' and v.art_id='" + arp + "' and  v.profil_id= '"
							+ prof + "'  ");

				}

				/*
				 * rs=null;st=null; h=0; st=con.createStatement();
				 * 
				 * List aprob=returnForm.getListaprob();
				 * 
				 * for (int j=0;j<aprob.size();j++){ Rang rang =(Rang)
				 * aprob.get(j);
				 * 
				 * System.out.println(rang.getMagasin()); String
				 * magg=rang.getMagasin();
				 * 
				 * String artt=rang.getArticle();
				 * System.out.println("art"+rang.getArticle());
				 * 
				 * String proff=rang.getProfil(); System.out.println(
				 * "prof"+rang.getProfil());
				 * 
				 * String pqq=rang.getPq();
				 * System.out.println("pq"+rang.getPq());
				 * 
				 * String hlrr=rang.getHlr();
				 * System.out.println("hlr"+rang.getHlr());
				 * 
				 * String qtreserv_auto=rang.getQte();
				 * System.out.println(rang.getQte());
				 * 
				 * String qteauto=rang.getQt(); System.out.println(qteauto);
				 * 
				 * Integer qteautoglobal=rang.getQtAuto();
				 * System.out.println(qteautoglobal);
				 * 
				 * 
				 * if (qteauto.equals(qtreserv_auto)) {
				 * 
				 * System.out.println("livr� egale r�serv�");
				 * System.out.println(
				 * "UPDATE gss_reserv_approb v SET v.qte_auto='"
				 * +Integer.toString(Integer.parseInt(qteauto)+qteautoglobal)+
				 * "' WHERE v.res_app_whs='"+magg+"' and v.trans_type='"+txt+
				 * "' and v.whs_id='"+txt1+"' and v.trans_no='"+txt2+
				 * "' and v.art_id=(select a.art_id from gss_article a where a.art_art_libelle='"
				 * +artt+"') and  v.profil_id= '"+proff+"' and v.res_app_pq=  '"
				 * +pqq+"'");
				 * 
				 * h= st.executeUpdate(
				 * "UPDATE gss_reserv_approb v SET v.qte_auto='"
				 * +Integer.toString(Integer.parseInt(qteauto)+qteautoglobal)+
				 * "' WHERE v.res_app_whs='"+magg+"' and v.trans_type='"+txt+
				 * "' and v.whs_id='"+txt1+"' and v.trans_no='"+txt2+
				 * "' and v.art_id=(select a.art_id from gss_article a where a.art_art_libelle='"
				 * +artt+"') and  v.profil_id= '"+proff+"'  "); } else
				 * 
				 * { System.out.println("livr� n'est pas egale r�serv�");
				 * System.out.println(
				 * "UPDATE gss_reserv_approb v SET v.qte_auto='"
				 * +Integer.toString(Integer.parseInt(qteauto)+qteautoglobal)+
				 * "' WHERE v.res_app_whs='"+magg+"' and v.trans_type='"+txt+
				 * "' and v.whs_id='"+txt1+"' and v.trans_no='"+txt2+
				 * "' and v.art_id=(select a.art_id from gss_article a where a.art_art_libelle='"
				 * +artt+"') and  v.profil_id= '"+proff+"' and v.res_app_pq=  '"
				 * +pqq+"'");
				 * 
				 * h = st.executeUpdate(
				 * "UPDATE gss_reserv_approb v SET v.qte_auto='"
				 * +Integer.toString(Integer.parseInt(qteauto)+qteautoglobal)+
				 * "' WHERE v.res_app_whs='"+magg+"' and v.trans_type='"+txt+
				 * "' and v.whs_id='"+txt1+"' and v.trans_no='"+txt2+
				 * "' and v.art_id=(select a.art_id from gss_article a where a.art_art_libelle='"
				 * +artt+"') and  v.profil_id= '"+proff+"'  ");
				 * 
				 * 
				 * }
				 * 
				 * }
				 */
				con.commit();

			} catch (SQLException ex) {
				System.out.println("y'a un prob ");
				ex.printStackTrace();

				con.rollback();
				con.close();
				throw ex;

			}

			/*
			 * try {
			 * 
			 * String txt = code.substring(0,3); System.out.println("txt="+txt);
			 * String txt1 = code.substring(4,7);
			 * System.out.println("txt1="+txt1); String txt2 =
			 * code.substring(8); System.out.println("txt2="+txt2);
			 * 
			 * 
			 * //////mettre � jour la r�servation
			 * 
			 * 
			 * st14=con.createStatement(); st15=con.createStatement();
			 * 
			 * rs15=st15.executeQuery(
			 * "select r.art_id,nvl(p.profil_libelle,'_'),'_',sum(r.rng_end-r.rng_start+1) from gss_range r ,gss_article a  ,gss_article_profil p where (a.art_id=r.art_id) and p.profil_id(+)=r.profil_id and r.trans_type='TSO' and r.whs_id='W00' and r.trans_no='"
			 * +max+"' group by  r.art_id,p.profil_libelle");
			 * 
			 * 
			 * while (rs15.next()){
			 * 
			 * 
			 * String art= rs15.getString(1).trim(); System.out.println(art);
			 * 
			 * 
			 * String proff=getResult(rs15.getString(2));
			 * System.out.println(proff);
			 * 
			 * 
			 * String pqq=getResult(rs15.getString(3)); System.out.println(pqq);
			 * 
			 * String qte=rs15.getString(4).trim(); System.out.println(qte);
			 * 
			 * System.out.println(
			 * "select  v.art_id,v.profil_id,v.res_app_pq,v.res_app_hlr,v.qte_livree,v.quantite_article from gss_reserv_approb v where v.res_app_whs='CENTRE'and v.trans_type='"
			 * +txt+"' and v.whs_id='"+txt1+"' and v.trans_no='"+txt2+
			 * "' and v.livre='N'"); rs14=st14.executeQuery(
			 * "select  v.art_id,nvl(v.profil_id,'_'),nvl(v.res_app_pq,'_'),nvl(v.res_app_hlr,'_'),v.qte_auto,v.quantite_article from gss_reserv_approb v where v.res_app_whs=(select w.whs_region from gss_warehouse w where w.whs_adresse='"
			 * +mag+"') and v.trans_type='"+txt+"' and v.whs_id='"+txt1+
			 * "' and v.trans_no='"+txt2+"' and v.livre='N'");
			 * 
			 * 
			 * while (rs14.next()){
			 * System.out.println(rs14.getString(1).trim());
			 * System.out.println(rs14.getString(2).trim());
			 * System.out.println(rs14.getString(3).trim());
			 * System.out.println(rs14.getString(4).trim());
			 * 
			 * if (((art.equals(rs14.getString(1).trim())))&&(proff.equals(
			 * getResult(rs14.getString(2))))) { System.out.println("�gale");
			 * Integer
			 * i=Integer.parseInt(qte)+Integer.parseInt(rs14.getString(5).trim()
			 * );
			 * 
			 * String qtt=Integer.toString(i); System.out.println(
			 * "quantit� calcul�"+qtt);
			 * 
			 * String qtt2=rs14.getString(6).trim();
			 * 
			 * 
			 * System.out.println("quantit� r�serv�"+qtt2); System.out.println(
			 * "livr� egale r�serv�"); System.out.println(
			 * "UPDATE gss_reserv_approb v SET v.qte_auto='"+qtt+
			 * "' WHERE v.res_app_whs=(select w.whs_region from gss_warehouse w where w.whs_adresse='"
			 * +mag+"')  and v.trans_type='"+txt+"' and v.whs_id='"+txt1+
			 * "' and v.trans_no='"+txt2+"' and v.art_id='"+art+
			 * "' and  v.profil_id= '"+proff+"'  ");
			 * 
			 * h8 = st12.executeUpdate(
			 * "UPDATE gss_reserv_approb v SET v.qte_auto='"+qtt+
			 * "' WHERE v.res_app_whs=(select w.whs_region from gss_warehouse w where w.whs_adresse='"
			 * +mag+"')  and v.trans_type='"+txt+"' and v.whs_id='"+txt1+
			 * "' and v.trans_no='"+txt2+"' and v.art_id='"+art+
			 * "' and  v.profil_id= '"+proff+"'  ");
			 * 
			 * }
			 * 
			 * }
			 * 
			 * }
			 * 
			 * 
			 * con.commit();
			 * 
			 * }
			 * 
			 * 
			 * catch(SQLException ex){ System.out.println("y'a un prob ");
			 * ex.printStackTrace();
			 * 
			 * con.rollback(); con.close(); throw ex;
			 * 
			 * }
			 */
			finally {
				con.close();
			}

		}

		String num = "TSO" + "-" + "W00" + "-" + max;
		request.setAttribute("num", num);
		System.out.println("le num de transaction" + num);
		return mapping.findForward("menu");

		/*
		 * editrapport( request,response,"ASO","W00",max);
		 * 
		 * 
		 * ActionForward forward = new RedirectingActionForward();
		 * forward.setPath("/autosorti.do?hidden=afficherreserv"); return
		 * forward;
		 */
	}

	public ActionForward annuler2(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws IOException, ServletException, SQLException {

		ReturnForm returnForm = (ReturnForm) form;

		ActionForward forward = new RedirectingActionForward();
		forward.setPath("/autosorti.do?hidden=afficherreserv");
		return forward;
	}

	public ActionForward afficher(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException {
		ReturnForm returnForm = (ReturnForm) form;// TODO Auto-generated method
												// stub
		 
			  
			  
			  Connexion connexion=new Connexion();
			  Connection con=connexion.createConnection(request);
			  
			  Statement st,st1,st2,st3,st4, st5 = null;
			  ResultSet rs,rs1,rs2,rs3,rs4, rs5 = null;
			  String res,max=null;
			  Integer R1,R2,I2,R;
			  ArrayList list = new ArrayList();
			  
			  ArrayList list1 = new ArrayList();
			  
			  ArrayList listmag = new ArrayList();
			  
			  ArrayList listart = new ArrayList();
			  ArrayList listprof = new ArrayList();
			  
			  ArrayList listdist = new ArrayList();
			 
			  
			  
			  
			  st=con.createStatement();
			  st1=con.createStatement();
			  st2=con.createStatement();
			  st3=con.createStatement();
			  st4=con.createStatement();
			  st5 = con.createStatement();
			  
			  
				
			  File projectRealPath=new File(request.getSession().getServletContext().getRealPath("."));
				
				  
			File jasperFile=new File(projectRealPath,"bon/requete_dynamique.txt");
			System.out.println(jasperFile.getAbsolutePath());



			Properties prop = new Properties();

			FileInputStream in = null;
			try {
				in = new FileInputStream(jasperFile);
			} catch (FileNotFoundException e1) {

			e1.printStackTrace();
			}
			try {
				prop.load(in);
				in.close();
			} catch (IOException e1) {

				e1.printStackTrace();
			}

			// Extraction des propri�t�s
			String requetecombo = prop.getProperty("requete");
			System.out.println("requete_combo"+requetecombo);
			  

			String mm= (String)request.getSession().getAttribute("username");
		     rs1 = st1.executeQuery("select w.whs_id, w.whs_adresse from gss_warehouse w where w.whs_id in (select d.whs_id from gss_droit_acces d where d.profil_act_id='PR02' and d.act_id=(select ac.act_id from gss_actor ac where ac.act_name='"+mm+"')) and w.whs_status='A'");

			  
			 // rs=st.executeQuery("select distinct gss_article.art_art_libelle,gss_article_profil.profil_libelle,r.rng_start,r.rng_end,r.rng_packaged,r.rng_statut,case when gss_article.art_type_id in ('S1','S2') then decode(substr(r.rng_start, 4, 1),'0', substr(r.rng_start, 4, 2),'1', substr(r.rng_start, 4, 2),'2', substr(r.rng_start, 4, 2), '0' || substr(r.rng_start, 5, 1)) else '_' end hlr,r.rng_end-r.rng_start+1 as qte from gss_range,gss_article, gss_article_profil,gss_warehouse where (gss_article.art_id=r.art_id) and (gss_article_profil.profil_id (+) =r.profil_id )and (r.rng_packaged='N')and(r.rng_inactif='A')");
			  //rs1 = st1.executeQuery("select whs_adresse from gss_warehouse where  whs_status='A' and gss_warehouse.whs_id <> 'W00'");
			  rs2=st2.executeQuery("select d.dest_id, d.dest_nom from gss_destinataire d where d.dest_type='FOURNISSEUR' and d.dest_status='A'");
			 rs=st.executeQuery("select art_art_libelle from gss_article where art_status='A' ");
			 rs3=st3.executeQuery("select profil_libelle from gss_article_profil where profil_statut='A'"); 
			 //add for snoc change
			 
			 
			  
			  
			  //packagingForm.setResulrang(list);
			/*
			try{
			rs4=st4.executeQuery("select max(trans_no) from gss_transaction where (trans_type='ASO')"); 
			  
			 
			  
			  while (rs4.next()){
			          max=rs4.getString(1).trim();
			          
			         System.out.println(max);
			         }
			           
			         R1=Integer.parseInt(max);
			     R=R1+1;
			    res=Integer.toString(R);
			    System.out.println(res);
			  
			}  
			  
			catch (Exception e){
			        res = "10000";
			        //System.out.println("rs est null"); 
			       }
			    */
			    
			 /*     String afficher="ASO"+"-"+"W00"+"-"+res;
			  
			      returnForm.setTransaction(afficher);
			request.getSession().setAttribute("maxtrans", res);*/
			 
			 
			 while (rs.next())
			 {
			              
			 String art = rs.getString(1).trim();
			 System.out.println(art);
			 listart.add(art);
			              
			 }
			 
			 returnForm.setListarticle(listart);
			 returnForm.setListarticle1(listart);
			
			 
			 returnForm.setListprof(listprof); 
			  listmag.clear();
			  while (rs1.next())
			     {
			                  
			     String mag = rs1.getString(2).trim();
			     System.out.println(mag);
			     listmag.add(mag);
			                  
			     }
			  
			      
			      System.out.println(listmag);
			  
			      
			      
			      returnForm.setListmaga(listmag);
			      
			      
			     
			      
			      
			      while (rs2.next())
			      {  
			       
			      String part=rs2.getString(2).trim();
			      System.out.println(part);
			      
			       listdist.add(part);
			      }
			      
			      System.out.println(listdist);
			      
			      returnForm.setListdist(listdist);
			      
			      
			 
			  
			//initialiser la 1ere collection avec des vides  
			      
			      
			Rang3 rang3=new Rang3();
			  
			  
			  rang3.setAa("");
			  rang3.setProff("");
			  rang3.setStt("");
			  rang3.setEndd("");
			  rang3.setQtt("");
			  
			  list1.add(rang3);
			  
			  returnForm.setListajouter(list1);
			  
			  
			 
			  
			//  initialiser la 2eme collection avec des vides  
			  
			  
			  
			  Rang rang=new Rang();
			  
			  rang.setArticle("");
			  rang.setProfil("");
			  rang.setStart("");
			     rang.setEnd("");
			  rang.setActive("");
			  rang.setPackag("");
			  rang.setQte("");
			  rang.setPq("");
			  rang.setHlr("");
			  
			  
			  
			  
			  list.add(rang);
			  returnForm.setResulrang(list);
			 
			//inialiser les champs avec des vides 
			  returnForm.setArticle("");
			  returnForm.setDistination("");
			returnForm.setDebut("");
			returnForm.setFin("");
			returnForm.setMagasourc("");
			returnForm.setNote("");
			returnForm.setCodaprob("");
			returnForm.setProfil("");
			returnForm.setReserv("");
			returnForm.setDis("");
			returnForm.setMag("");
			returnForm.setArticle1("");
			returnForm.setProfil1("");
			     
			returnForm.setHiddenTest("");   

				con.close();
			    
			  return mapping.findForward("auto");
	}

	

	public ActionForward chercher(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException, ServletException {

		ReturnForm returnForm = (ReturnForm) form;// TODO Auto-generated method
												// stub

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		Statement st, st1, st2, st3 = null;
		ResultSet rs, rs1, rs2, rs3 = null;
		Integer R, R1;
		String codedist = null, type = null, codmag = null, requette;

		String max = null, code = null;
		ArrayList list = new ArrayList();
		ArrayList list1 = new ArrayList();
		ArrayList mm = new ArrayList();
		ArrayList mm1 = new ArrayList();

		ArrayList listmag = new ArrayList();

		ArrayList listdist = new ArrayList();

		st = con.createStatement();
		st1 = con.createStatement();
		st2 = con.createStatement();
		st3 = con.createStatement();
		String mag = returnForm.getMagasourc();
		// String mag=returnForm.getMag();
		System.out.println(mag);

		String dist = returnForm.getDistination();
		System.out.println(dist);

		String article2 = returnForm.getArticle1();
		System.out.println("article2" + article2);
		String[] artPrfl = null;
		boolean articleConcatProfile = false;
		String[] artProfile = new String[2];
		artProfile = article2.split("/");
		
		/*
		if(artProfile[0]==null || artProfile[0].equals("")) 
			artProfile[0] = article2;
		*/
		String profil2 = returnForm.getProfil1();
		System.out.println("profil2" + profil2);

		if (profil2.equals("")) {
			profil2 = "_";

		}
		

		
		rs1 = st1.executeQuery("select dest_id,dest_type from gss_destinataire d  where d.dest_nom='" + dist
				+ "' and dest_type ='FOURNISSEUR'");
		while (rs1.next()) {
			codedist = rs1.getString(1).trim();
			System.out.println(codedist);

			type = rs1.getString(2).trim();
			System.out.println(type);
		}

		rs2 = st2.executeQuery("select w.whs_id from gss_warehouse w where w.whs_adresse='" + mag + "'");
		while (rs2.next()) {
			codmag = rs2.getString(1).trim();
			System.out.println(codmag);

		}

		
		
		requette ="select ar.art_art_libelle, g.rng_start, g.rowid from gss_range g, gss_transaction_range tr, gss_transaction l, gss_article ar where g.rng_sortie not in('S','F') and g.art_id = ar.art_id and g.rng_id = tr.t_r_rng_id and l.trans_no = tr.t_r_trans_no and l.trans_type= tr.t_r_trans_type and l.whs_id = tr.t_r_trans_whs and l.trans_type='REC' "+
      "and  tr.t_r_rng_id in ( select aa.t_r_rng_id from (select f.t_r_rng_id, max(f.t_r_date) from gss_transaction_range f where f.t_r_trans_type='REC' group by f.t_r_rng_id) aa) and ar.art_art_libelle ='" + article2 + "' and l.dest_id = '"+codedist+"' and g.rng_whs ='"+ codmag + "'  order by g.rowid asc";
        
		 
		 
        
		//requette = "select distinct a.art_art_libelle,r.rng_start  from gss_range r,gss_article a, gss_warehouse  where a.art_id=r.art_id  and "
		//		+ " r.rng_sortie in ('N','R')  and r.rng_whs= '"+ codmag + "'  and a.art_art_libelle='" + article2 + "' and   r.rng_dist='"+codedist+"'";
        //add for snoc
        
		System.out.println(requette);

		 {
			
		}

		System.out.println(requette);

		rs = st.executeQuery(requette);
		list.clear();
		while (rs.next()) {

			System.out.println("[" + rs.getString(1) + "],[" + rs.getString(2) + "]");
			Rang rang = new Rang();

			rang.setArticle(rs.getString(1).trim());
			rang.setStart(rs.getString(2).trim());
			rang.setArt(rs.getString(1).trim());
			rang.setSt(rs.getString(2).trim());

			
			// rang.setSwap(rs.getString(7).trim());
			

			list.add(rang);
		}

		
		

		
		returnForm.setResulrang(list);

		returnForm.setHiddenTest("");

		con.close();

		return mapping.findForward("auto");
	}

	public ActionForward ajouter(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException, ServletException {
		ReturnForm returnForm = (ReturnForm) form;

		// List listt;

		// ArrayList mm = new ArrayList();
		// ArrayList mm1 = new ArrayList();
		boolean articleConcatProfile = false;
		String nn = request.getParameter("art");
		String nn1 = request.getParameter("prof");
		String nn2 = request.getParameter("st");
		String nn3 = request.getParameter("nd");
		String nn4 = request.getParameter("qt");
		String rng_id = request.getParameter("rng_id");
		String act_id = request.getParameter("act_id");
		System.out.println(rng_id);
		System.out.println(act_id);
		String[] artProfile = new String[2];
		artProfile = nn.split("/");
		
		if(  artProfile.length==2 && artProfile[1]!= null && !artProfile[1].equals("")){
			articleConcatProfile = true;
			
		}
		// request.getSession().setAttribute( "art",nn);
		// request.getSession().setAttribute( "prof",nn1);

		System.out.println(nn);
		System.out.println(nn1);
		System.out.println(nn2);
		System.out.println(nn3);
		System.out.println(nn4);

		returnForm.setDebut(nn2);
		returnForm.setFin(nn3);
		if(articleConcatProfile )
		
		returnForm.setArticle(nn);
		
		returnForm.setProfil(nn1);
		returnForm.setAct_id(act_id);
		returnForm.setRng_id(rng_id);

		returnForm.setHiddenTest("");

		return mapping.findForward("auto");
	}

	public ActionForward ajouter1(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException, ServletException {
		ReturnForm returnForm = (ReturnForm) form;// TODO Auto-genera

		String art, prof, nd, nf, qute, trouv, hlr, pr = null;
		Long ndl, nfl, qte;
		List list = null;
		List listGrand = null;
		Statement st, st1 = null;
		ResultSet rs , rs2 = null;
		Boolean trouver = false, existe = false, existe2 = false;
		String nn1_grand = null;
		String act_id2 = null, rng_id2 = null;
		// Connexion connexion=new Connexion();
		// Connection con=connexion.createConnection(request);

		ArrayList nouv = new ArrayList();

		Rang3 rang2 = new Rang3();

		list = returnForm.getListajouter();
		listGrand = returnForm.getResulrang();
    try{
		for (int j = 0; j < listGrand.size(); j++) {
			Rang list3 = (Rang) listGrand.get(j);
			if ((list3.getArticle().equals(""))) {
				System.out.println("la 1ere liste est vide");
				returnForm.setHiddenTest("S�lectionner un warehouse SVP");

				returnForm.setArticle("");
				//returnForm.setProfil("");
				returnForm.setDebut("");
				//returnForm.setFin("");

				return mapping.findForward("auto");
			} else {

				System.out.println("la 1ere liste n'est pas vide");

			}

		}
		int snocQte = 0;
		int qte1 =0;
		
		art = returnForm.getArticle();
		prof = returnForm.getProfil();
		nd = returnForm.getDebut();
		nf = returnForm.getFin();
		String rng_id = returnForm.getRng_id();
		String act_id = returnForm.getAct_id();
		System.out.println(rng_id);
		System.out.println(act_id);
        
		nn1_grand = prof;
		if (prof.equals("")) {
			nn1_grand = "_";
			System.out.println(nn1_grand);
			System.out.println("profil null");
		}
         
		
		//check SNOC quantity
		
		
		
		ndl = Long.parseLong(nd);
		//nfl = Long.parseLong(nf);
		//qte = nfl - ndl + 1;
		//qute = Long.toString(qte);

		

		int size = list.size();
		System.out.println(size);

		if (size == 0) {

			System.out.println("la collection est vide");

			for (int j = 0; j < listGrand.size(); j++) {
				Rang list3 = (Rang) listGrand.get(j);

				/*
				 * boolean tmp = ( Long.parseLong(list3.getEnd())>=ndl &&
				 * Long.parseLong(list3.getEnd())<=nfl ) ; System.out.println(
				 * "la bool = "+Boolean.toString(tmp));
				 */
				if (ndl== Long.parseLong(list3.getStart()) && art.equals(list3.getArticle() )) {

					/// ndl <= parseLong(list3.getStart()) <= nfl
					trouver = true;
					existe = true;

					act_id2 = list3.getAct_id();
					rng_id2 = list3.getRng_id();
					System.out.println("act_id2" + act_id2);
					System.out.println("rng_id2" + rng_id2);
					break;

				} /// end if teste coll grande

			} //// end for coll grande

			if (existe.equals(false)) {
				returnForm.setHiddenTest("range n'est pas dans la coll grande");
				System.out.println("range n'existe pas dans la collection grande");

				returnForm.setArticle("");
				returnForm.setProfil("");
				returnForm.setDebut("");
				returnForm.setFin("");

				return mapping.findForward("auto");
			}

			else {

				// calculer la quantit�

				
				
				

				// remplir la collection
				rang2.setAa(art);
				
				rang2.setSt(nd);
				rang2.setStt(nd);
				
				
				rang2.setAaa(art);
				
				
				/*
				 * rang2.setAct_id(act_id); rang2.setRng_id(rng_id);
				 */
				rang2.setAct_id(act_id2);
				rang2.setRng_id(rng_id2);

				list.add(rang2);

				for (int j = 0; j < list.size(); j++) {
					System.out.println("dans le for");
					System.out.println("j =" + j);

					Rang3 list3 = (Rang3) list.get(j);

					if ((list3.getAa().equals(""))) {
						System.out.println("dans le if");
					} else {
						nouv.add(list3);
						System.out.println("dans le else");

					}

				}

				trouver = true;
				returnForm.setListajouter(nouv);
				returnForm.setHiddenTest("");
				// break;

			} // end if ""

		}

		// else de size

		else {

			for (int i = 0; i < list.size(); i++) {
				Rang3 list2 = (Rang3) list.get(i);

				if (list2.getAa().equals("")) {

					System.out.println("la 1ere ligne vide");

					for (int j = 0; j < listGrand.size(); j++) {
						Rang list3 = (Rang) listGrand.get(j);

						
						if ((ndl == Long.parseLong(list3.getStart())
								&& art.equals(list3.getArticle()) )) {

							/// ndl <= parseLong(list3.getStart()) <= nfl
							trouver = true;
							existe = true;

							act_id2 = list3.getAct_id();
							rng_id2 = list3.getRng_id();
							System.out.println("act_id2" + act_id2);
							System.out.println("rng_id2" + rng_id2);

							break;

						} /// end if teste coll grande

					} //// end for coll grande

					if (existe.equals(false)) {
						returnForm.setHiddenTest("range n'est pas dans la coll grande");
						System.out.println("range n'existe pas dans la collection grande");

						returnForm.setArticle("");
						returnForm.setProfil("");
						returnForm.setDebut("");
						returnForm.setFin("");

						return mapping.findForward("auto");
					}

					else {

						// calculer la quantit�

						

						// remplir la collection
						rang2.setAa(art);
						
						rang2.setSt(nd);
						rang2.setStt(nd);
						
						
						rang2.setAaa(art);
						
						/*
						 * rang2.setAct_id(act_id); rang2.setRng_id(rng_id);
						 */
						rang2.setAct_id(act_id2);
						rang2.setRng_id(rng_id2);

						list.add(rang2);

						for (int j = 0; j < list.size(); j++) {
							System.out.println("dans le for");
							System.out.println("j =" + j);

							Rang3 list3 = (Rang3) list.get(j);

							if ((list3.getAa().equals(""))) {
								System.out.println("dans le if");
							} else {
								nouv.add(list3);
								System.out.println("dans le else");

							}

						}

						trouver = true;
						returnForm.setListajouter(nouv);
						returnForm.setHiddenTest("");
						break;

					} // end if ""
				} // ende else existe

				///// si la collection est non vide

				else {

					System.out.println("la 1ere ligne non vide");

					returnForm.setHiddenTest("");

					if ((Long.parseLong(nd) == Long.parseLong(list2.getSt()))
							&&  art.equals(list2.getAa())) {
						returnForm.setHiddenTest("range dans la coll");
						System.out.println("range existe dans la collection");
						trouver = true;
						existe2 = true;
						existe = true;

						break;
					} //// end if collection

				} //// end for

				if (existe2.equals(false)) {
					//// n'existe pas dans la petite coll

					for (int j = 0; j < listGrand.size(); j++) {
						Rang list3 = (Rang) listGrand.get(j);

						
						if ((ndl == Long.parseLong(list3.getStart()) && art.equals(list3.getArticle())))

						{
							// trouver=true;
							existe = true;

							act_id2 = list3.getAct_id();
							rng_id2 = list3.getRng_id();
							System.out.println("act_id2" + act_id2);
							System.out.println("rng_id2" + rng_id2);
							break;

						} /// end if teste coll grande

					} //// end for coll grande
				} // end if existe2

			} /// end else " "

		}

		if (existe.equals(false)) {
			returnForm.setHiddenTest("range n'est pas dans la coll grande");
			System.out.println("range n'existe pas dans la collection grande");

			returnForm.setArticle("");
			returnForm.setProfil("");
			returnForm.setDebut("");
			returnForm.setFin("");

			return mapping.findForward("auto");
		}

		if (trouver.equals(false)) {
			returnForm.setHiddenTest("");

			System.out.println("rang n'existe pas dans la collection ");

			// calculer la quantit�
			
			

			// remplir la collection
			rang2.setAa(art);
			rang2.setProff(prof);
			rang2.setSt(nd);
			rang2.setStt(nd);
			rang2.setEndd(nf);
			rang2.setSee(nf);
			
			rang2.setAaa(art);
			rang2.setPpp(prof);
			rang2.setAct_id(act_id2);
			rang2.setRng_id(rng_id2);
			list.add(rang2);

			returnForm.setListajouter(list);
		}

		returnForm.setArticle("");
		returnForm.setProfil("");
		returnForm.setDebut("");
		returnForm.setFin("");
    }catch(Exception e){
    	e.printStackTrace();
    	
    }
		

		return mapping.findForward("auto");
	}

	public ActionForward Retirer(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException {
		ReturnForm returnForm = (ReturnForm) form;
		List list = null;
		ArrayList nouv = new ArrayList();

		list = returnForm.getListajouter();
		String art = request.getParameter("aaa");
		System.out.println("arti" + art);
		String prof = request.getParameter("ppp");
		System.out.println("prof" + prof);
		String ser_str = request.getParameter("st");
		System.out.println("serial_str" + ser_str);
		String ser_end = request.getParameter("see");
		System.out.println("serial_end" + ser_end);
		String quante = request.getParameter("qt");
		System.out.println("qte" + quante);

		System.out.println("colle" + list.size());
		for (int i = 0; i < list.size(); i++) {

			Rang3 list2 = (Rang3) list.get(i);
			System.out.println("dans le for");

			Rang3 pre = new Rang3();

			System.out.println(i);
			System.out.println("soum" + list2.getAa());

			if ((list2.getAa().equals(art)) && (list2.getProff().equals(prof)) && (list2.getEndd().equals(ser_end))
					&& (list2.getStt().equals(ser_str))) {
				System.out.println("dans le if");
			} else {
				nouv.add(list2);
				System.out.println("dans le else");
			}

		}

		returnForm.setListajouter(nouv);

		returnForm.setHiddenTest("");
		return mapping.findForward("auto");
	}

	public String getResult(String Str) {
		return ((Str != null) ? Str = Str.trim() : Str);
	}

	public String setResult(String Str) {
		return ((Str != null) ? Str : null);
	}

	public ActionForward valider(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException, ServletException, ParseException {
		ReturnForm returnForm = (ReturnForm) form;

		Connexion connexion = new Connexion();
		Connection con = connexion.createConnection(request);

		String idpart = null, idact = null, idart, idprof, maxrng = null, res1 = null, res2, start, end, tra, wh, no,
				whp, pfp, arp, rp, acp, pq, statu, swap, promo, prior, p, t, s, r, sta2 = null, end2, res3 = null;
		Statement st, st1, st2, st3, st4, st5, st6, st7, st8, st9, st10, st11, st12, st14, st15 = null;
		ResultSet rs, rs1, rs2, rs3, rs4, rs5, rs6, rs8, rs14, rs15 = null;
		int h, h1, h2, h3, h4, h5, h6, h7, h8;
		Integer I2;
		Number P = 0;
		long R2 = 0, R3 = 0, I = 0, Res2 = 0, I1 = 0;
		List listt;
		String whh = null, codedist = null;
		ArrayList priv = new ArrayList();

		st = con.createStatement();
		st1 = con.createStatement();
		st2 = con.createStatement();
		st3 = con.createStatement();
		st4 = con.createStatement();
		st5 = con.createStatement();
		st6 = con.createStatement();
		st7 = con.createStatement();
		st8 = con.createStatement();
		st9 = con.createStatement();
		st10 = con.createStatement();
		st11 = con.createStatement();
		st12 = con.createStatement();
		String codemag = "";
		String max = null;
		String whs_dest = "";
		/*
		 * String max= (String)request.getSession().getAttribute("maxtrans");
		 * System.out.println(max);
		 */

		try {
			// start Snoc update
			// check if this transaction is related to snoc
			// if yes compare total Quantity with quantity sent
			int allQte = 0;
			Rang3 rang = null;
			System.out.println("in Valider autoSortie ////////////////");
			rs1 = st1.executeQuery("select dest_id from gss_destinataire where dest_nom='" + returnForm.getDistination()
			+ "' and dest_type='FOURNISSEUR'  ");
			
			while (rs1.next()) {

				codedist = rs1.getString(1).trim();
				System.out.println(codedist);
			}
			
			ResultSet rs44 = st12.executeQuery("select  w.whs_id from gss_warehouse w where w.whs_adresse='"+returnForm.getMagasourc()+"'");
			while (rs44.next()) codemag = rs44.getString(1);
			rs6 = st6.executeQuery("select nvl(max(trans_no),1) from gss_transaction where (trans_type='RTF') and whs_id=(select  w.whs_id from gss_warehouse w where w.whs_adresse='"+returnForm.getMagasourc()+"')");
			while (rs6.next()) {
				max = rs6.getString(1).trim();
			}
			int res = Integer.parseInt(max);
			res = res + 1;
			max = Integer.toString(res);
			System.out.println("le max :" + max);
		}

		catch (Exception e) {
			max = "100000000";
			// System.out.println("rs est null");
		}

		rs6 = null;
		st6 = null;
		st6 = con.createStatement();
		String mm = (String) request.getSession().getAttribute("username");
		System.out.println(mm);

		/*
		 * String whh = (String)request.getSession().getAttribute("werhs");
		 * System.out.println(whh);
		 */

		String mag = returnForm.getMagasourc();
		System.out.println(mag);

		//String distcombo = returnForm.getDistination().split("-")[1];
		//System.out.println(distcombo);

		/*
		 * String mag=returnForm.getMag(); System.out.println(mag);
		 * 
		 * String dist=returnForm.getDis(); System.out.println(dist);
		 */

		String note = returnForm.getNote();
		System.out.println(note);

		/*
		 * String code=returnForm.getCodaprob(); System.out.println(code);
		 */

		con.setAutoCommit(false);

		

		// rs2=st2.executeQuery("select whs_id from gss_warehouse where
		// gss_warehouse.whs_adresse='"+origin+"'");

		rs3 = st3.executeQuery("select ACT_ID from gss_actor where act_name='" + mm + "'");

		

		/*
		 * while (rs2.next()) {
		 * 
		 * String whs = rs2.getString(1).trim(); System.out.println(whs); }
		 */

		while (rs3.next()) {

			idact = rs3.getString(1).trim();
			System.out.println(idact);
		}

		listt = returnForm.getListajouter();

		/*
		 * if (prof!="_"){ rs6=st6.executeQuery(
		 * "select profil_id from gss_article_profil where profil_libelle='"
		 * +prof+"'");
		 * 
		 * if (rs6.next()){ idprof=rs6.getString(1).trim();
		 * System.out.println(idprof); } }
		 */

		// h = st.executeUpdate("insert into gss_transaction
		// values('"+max+"','TRE','W00',SYSDATE,'"+idact+"','"+codesource+"','','"+note+"','','','')");

		int size = listt.size();
		System.out.println(size);

		if (size == 0) {
			System.out.println("la collection est vide");

			returnForm.setHiddenTest("collection null");

			return mapping.findForward("auto");

		} else

		{
			try {
				System.out.println("insert into  gss_transaction values('" + max + "','RTF','W00',SYSDATE,'" + idact
						+ "','" + codedist + "','','" + note + "','','','','','N')");
				h = st.executeUpdate("insert into  gss_transaction values('" + max + "','RTF',(select  w.whs_id from gss_warehouse w where w.whs_adresse='"+returnForm.getMagasourc()+"'),SYSDATE,'" + idact
						+ "','" + codedist + "','','" + note + "','','','','','N')");

				for (int i = 0; i < listt.size(); i++) {
					System.out.println(i);
					Rang3 rn = (Rang3) listt.get(i);
					System.out.println("aa=" + rn.getAa());
					System.out.println("pp=" + rn.getProff());
					System.out.println("st=" + rn.getStt());
					System.out.println("se=" + rn.getEndd());
					System.out.println("qt=" + rn.getQtt());
					

					

					String art = rn.getAa();
					System.out.println(art);

					if (art.equals("")) {
						System.out.println("la collection est vide");

						returnForm.setHiddenTest("collection null");

						return mapping.findForward("auto");

					}

					try {
						rs4 = st4.executeQuery("select max(rng_id) from gss_range where ACT_ID='" + idact + "'");

						if (rs4.next()) {
							maxrng = rs4.getString(1).trim();
							System.out.println(maxrng);

							R2 = Long.parseLong(maxrng);
							R2 = R2 + 1;
							res1 = Long.toString(R2);
							System.out.println(res1);

						}

					}

					catch (Exception e) {

						res1 = "1000000000";

					}

					String prof = rn.getProff();
					System.out.println(prof);
					String sta = rn.getStt();
					System.out.println(sta);
					String ind = rn.getEndd();
					System.out.println(ind);
					String rng_id = rn.getRng_id();
					String act_id = rn.getAct_id();
					System.out.println(rng_id);
					System.out.println(act_id);

					// rs2=st2.executeQuery("select distinct
					// rng_start,rng_end,rng_id,act_id,profil_id,art_id,rng_pq,rng_statut,rng_swap,trans_type,r.whs_id,trans_no,rng_promotion,rng_priorite,rng_packaged,rng_transfert,rng_sortie,rng_reintegration,rng_whs,rng_dist,rng_packaging_whs,rng_sortie_whs,rng_reintegration_whs,rng_transfert_whs
					// from gss_range,gss_warehouse where (rng_inactif ='A') and
					// r.rng_tpd is null and r.rng_whs=gss_warehouse.whs_id and
					// gss_warehouse.whs_adresse='"+mag+"' and r.rng_statut=
					// 'CHARGE' and r.rng_sortie='N' or (rng_inactif ='A' and
					// r.rng_tpd is null and r.rng_whs=gss_warehouse.whs_id and
					// gss_warehouse.whs_adresse='"+mag+"' and
					// r.rng_swap='SWAP'and r.rng_sortie='N') or (rng_inactif
					// ='A' and r.rng_tpd is null and
					// r.rng_whs=gss_warehouse.whs_id and
					// gss_warehouse.whs_adresse='"+mag+"' and
					// r.rng_packaged='P' and r.rng_statut='ACTIVE' and
					// r.rng_sortie='N')");
					
					//rs2 = st2.executeQuery("select  w.whs_id from gss_warehouse w where w.whs_adresse='"+returnForm.getMagasdist()+"'");

					//while (rs2.next())
					{
						System.out.println("dans le while");
						//whs_dest = rs2.getString(1);
						

						/***************
						 * rang entier
						 *******************************/
						
						 
							System.out.println("dans le 1er if");
/*
							h2 = st7.executeUpdate("insert into gss_range values ('" + res1 + "','" + idact
									+ "',decode('" + pfp + "','null',null,'" + pfp + "'),'" + arp + "','" + sta + "','"
									+ ind + "','" + rp + "','" + acp + "','A',SYSDATE,'',decode('" + pq
									+ "','null',null,'" + pq + "'),'" + statu + "','TSO','W00','" + max
									+ "','','',decode('" + promo + "','null',null,'" + promo + "'),decode('" + prior
									+ "','null',null,'" + prior + "'),'" + p + "','" + t + "','O','" + r + "','" + whp
									+ "',decode('" + dist + "','null',null,'" + dist + "'),decode('" + whspack
									+ "','null',null,'" + whspack + "'),'" + codedist + "',decode('" + whsrentegr
									+ "','null',null,'" + whsrentegr + "'),decode('" + whstransfert + "','null',null,'"
									+ whstransfert + "'))");
                                   */
							h3 = st9.executeUpdate("insert into gss_transaction_range values ('RTF',(select  w.whs_id from gss_warehouse w where w.whs_adresse='"+returnForm.getMagasourc()+"'),'" + max
									+ "','" + sta + "','" + idact + "',SYSDATE,'"+i+"')");
							 System.out.println("hhhhhhhhh2");
/*
							h3 = st9.executeUpdate(
									"insert into gss_transaction_range select t_r_trans_type, t_r_trans_whs,t_r_trans_no,"
											+ res1 + " ,'" + idact
											+ "'code ,t_r_date from gss_transaction_range where t_r_rng_id='" + rp
											+ "' and t_r_rng_act_id ='" + acp + "'");
*/
							// h8 = st12.executeUpdate("UPDATE gss_range SET
							// rng_inactif = 'I',rng_inactif_date=sysdate WHERE
							// (rng_id='"+rp+"')and (act_id='"+acp+"')");

							h8 = st12.executeUpdate(
									" update gss_range r set  r.rng_sortie='F' ,  r.rng_dist= (select  w.dest_id from gss_destinataire w where w.dest_nom='"+returnForm.getDistination()+"' and  w.dest_type='FOURNISSEUR')  WHERE r.rng_start='"+ sta + "'  and r.rng_inactif='A' ");
                             System.out.println("hhhhhhhhh");
							if (h8 == 0) {
								System.out.println("le rang est inactif");
								returnForm.setHiddenTest("rang deja touche");
								con.rollback();
								return mapping.findForward("auto");

							}

							
						

						

						/********** le 1er rang ********************/

						/*
						 * Res1=Long.parseLong(sta); Res2=Long.parseLong(ind);
						 */

						

						/***************** 2er partie ***************/

						

						/* 3 parties */
						

					}
				}

				con.commit();
				con.close();

			}

			catch (SQLException ex) {
				ex.printStackTrace();
				con.rollback();
				throw ex;

				/*
				 * System.out.println("probleme insertion");
				 * returnForm.setHiddenTest("probleme insertion"); return
				 * mapping.findForward("auto");
				 */

			} finally {
				con.close();
			}
		}
		
		 System.out.println("hhhhhhhhh1");
		String num = "RTF" + "-" + codemag + "-" + max;
		request.setAttribute("num", num);
		System.out.println("le num de transaction" + num);
		return mapping.findForward("menu");

		// editrapport( request,response,"ASO","W00",max);

		/*
		 * ActionForward forward = new RedirectingActionForward();
		 * forward.setPath("/autosorti.do?hidden=afficher"); return forward;
		 */
	}

	public ActionForward annuler(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws IOException, ServletException, SQLException {

		ReturnForm returnForm = (ReturnForm) form;

		ActionForward forward = new RedirectingActionForward();
		forward.setPath("/return.do?hidden=afficher");
		return forward;
	}

	public ActionForward editExcel(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException, IOException, ServletException {
		ReturnForm returnForm = (ReturnForm) form;// TODO Auto-generated method
												// stub

		List list = returnForm.getResulrang();
		String trans = "Retour Fournisseur";

		StockAction stock = new StockAction();
		stock.editExcel(response, list, trans);

		return null;

	}

	/*
	 * public String editrapport( HttpServletRequest request,HttpServletResponse
	 * response,String txt,String txt1,String txt2) {
	 * 
	 * 
	 * Connexion connexion=new Connexion(); Connection
	 * con=connexion.createConnection(request); File jasperFile;
	 * 
	 * try {
	 * 
	 * File projectRealPath=new
	 * File(request.getSession().getServletContext().getRealPath("."));
	 * 
	 * if((txt.equals("TRA"))||(txt.equals("RTR"))||(txt.equals("OTR")))
	 * 
	 * { System.out.println("je s8 ds transfert"); jasperFile=new
	 * File(projectRealPath,"bon/ordre transfert.jrxml");
	 * System.out.println(jasperFile.getAbsolutePath()); }
	 * 
	 * 
	 * if((txt.equals("REC"))||(txt.equals("OPA"))||(txt.equals("PAC"))||(txt.
	 * equals("RPA"))||(txt.equals("TRE"))||(txt.equals("REI"))||(txt.equals(
	 * "SOR"))||(txt.equals("ASO")))
	 * 
	 * { System.out.println("je s8 ds rec"); jasperFile=new
	 * File(projectRealPath,"bon/classic4.jrxml");
	 * System.out.println(jasperFile.getAbsolutePath());
	 * 
	 * }
	 * 
	 * 
	 * 
	 * else{ System.out.println("je s8 ds activation"); jasperFile=new
	 * File(projectRealPath,"bon/activation.jrxml");
	 * System.out.println(jasperFile.getAbsolutePath()); }
	 * 
	 * 
	 * JasperDesign jasperDesign = JRXmlLoader.load(jasperFile);
	 * 
	 * //JasperDesign jasperDesign1 = JRXmlLoader.load("\\bon\\classic4.jrxml");
	 * JasperReport jasperReport =
	 * JasperCompileManager.compileReport(jasperDesign); // - Param�tres �
	 * envoyer au rapport Map parameters = new HashMap();
	 * parameters.put("Titre", "Titre"); parameters.put("param1",new String
	 * ("'"+txt+"'")); parameters.put("param2", new String("'"+txt1+"'"));
	 * parameters.put("param3", new String("'"+txt2+"'"));
	 * 
	 * 
	 * JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport,
	 * parameters, con); // pour l'affichage //
	 * JasperViewer.viewReport(jasperPrint,false); // - Cr�ation du rapport au
	 * format PDF JasperExportManager.exportReportToPdfFile(jasperPrint,
	 * "rapport4.pdf");
	 * 
	 * response.setContentType("application/octet-stream");
	 * response.setHeader("Content-Disposition",
	 * "attachment; filename=\"rapport4.pdf\""); // Calculer le flux � renvoyer
	 * au client FileInputStream is = new FileInputStream("rapport4.pdf"); byte
	 * buffer[] = new byte[1024]; int nbLecture; // Envoyer le flux dans la
	 * r�ponse OutputStream os = response.getOutputStream(); while ((nbLecture =
	 * is.read(buffer)) != -1) { os.write(buffer, 0, nbLecture); } os.close();
	 * 
	 * } catch (JRException e) { e.printStackTrace(); } catch (Exception ex) {
	 * ex.printStackTrace(); }
	 * 
	 * return null; // return mapping.findForward("menu"); }
	 * 
	 */
}
